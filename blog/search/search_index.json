{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"2016/resource-management/","title":"Resource Management in Dokku","text":"<p>Every so often, user's ask if it's possible to use Dokku as the basis of a system where each user in Dokku would have access to only their applications. Because of various reasons, this isn't possible out of the box, though it's certainly within the realm of possibility.</p> <p>There are two requirements for such a system, one of which we'll cover here.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","resource-management"]},{"location":"2016/resource-management/#resource-management","title":"Resource Management","text":"<p>A common issue you may come up against is how to limit resource usage for different applications. One user's use of memory should not cause OOM issues in another application. Similarly, you would not want a particular application to hog the network bandwidth unfairly, or saturate disk I/O.</p> <p>These are not new problems to containers, multiple users on a system, or Dokku. These same issues also occur when deploying services directly on a server, or even running applications on your computer. Remember the last time your torrenting application used up all your network and you couldn't load a web page?</p> <p>It's also a solved problem. Applications that tend to use more bandwidth end up implementing quality of service algorithms to ensure your system runs smooth, allow users access to settings which they can modify to crank up/down resource usage, or some combination of the two. Dokku is no different.</p> <p>In Dokku's case, we normally provide users with high-level porcelain to handle the low-level plumbing. This usually comes in the form of plugins (porcelain) which orchestrates docker calls (plumbing). However, we move slowly from the plumbing towards porcelain as we judge just what the requirements are and how to best expose a ui around the given problem.</p>","tags":["dokku","resource-management"]},{"location":"2016/resource-management/#persistent-storage","title":"Persistent Storage","text":"<p>Take for instance the persistent storage. Dokku has long had plugin hooks, and very specifically implemented the <code>docker-args</code> plugin trigger way back in the <code>0.2.0</code> era. Gradually that evolved into the current <code>docker-args-PHASE</code> triggers, with the following phases:</p> <ul> <li><code>build</code>: the container that executes the appropriate buildpack</li> <li><code>deploy</code>: the container that executes your running/deployed application</li> <li><code>run</code>: the container that executes any arbitrary command via <code>dokku run myapp</code></li> </ul> <p>We discovered that while providing plugin triggers is great for tinkerers, it wasn't exactly the nicest way to configure docker options. Many users ended up using a plugin by Dyson Simmons, the unofficial docker-options plugin. I even pointed users at it for a while. At some point, we decided to integrate it into the core, and it was implemented in #1080 by Michael Hobbs and released in 0.3.17.</p> <p>Even back then, the first comment was \"How do I use this to have persistent storage?\". In retrospect, yes, this is a great feature to have in the core, and the new docker-options plugin was a bit too much like shiny plumbing. While the maintainers were distracted with other issues, the hack-fix was to update the documentation to have persistent storage as the example usage.</p> <p>Dokku implemented this feature in 0.5.0 as the storage plugin thanks to Justin Clark. The interface is a nice piece of porcelain that utilizes the same plugin triggers that the docker-options plugin exposes, except handles the very specific case of attaching persistent storage. It has resulted in many fewer support requests, and I believe has provided developers with a much nicer Dokku experience.</p>","tags":["dokku","resource-management"]},{"location":"2016/resource-management/#where-is-the-resource-porcelain","title":"Where is the resource porcelain?","text":"<p>The Dokku team has yet to see a nice interface to limiting resources of the following kind:</p> <ul> <li>Disk I/O</li> <li>RAM usage</li> <li>CPU usage</li> <li>Network I/O</li> </ul> <p>These are the common resources which dokku users may wish to limit for specific applications, and having a good ui is more important to us than implementing a feature off the cuff.</p> <p>We also need to consider how such a tool integrates with other Dokku features. The storage plugin works great as a standalone plugin, but it may not be ideal to have a plugin for each type of resource. As well, resource limitation in docker has a few different implementations, depending upon what your exact requirements are. Ideally the Dokku solution is a generic one which 80% of our users are happy with, and the 20% that are not can drop down to plugin triggers or the <code>docker-options</code> plugin.</p> <p>At the end of the day, this porcelain is defined by you, our users. Want this feature sooner rather than later? Submit a pull request with an implementation, and we'll help shepherd it along to a state where everyone will be happy to use it.</p>","tags":["dokku","resource-management"]},{"location":"2016/resource-management/#alerting-on-resource-usage","title":"Alerting on Resource Usage","text":"<p>While dokku manages the lifecycle of application containers, it does not and almost certainly will never manage monitoring and alerting on that usage. If your application does not have resource limitations in place, or hasn't run a background task in a while, or maybe just isn't running, that is your responsibility as a server operator to monitor/correct. Our recommendation here is to send logs/metrics to whatever upstream provider of metrics you prefer. Here are some awesome options:</p> <ul> <li>DataDog: Server and Application Performance Monitoring</li> <li>Dead Man's Snitch: Make sure your stuff is still running</li> <li>Logentries: Centralized logging and alerting</li> <li>NewRelic: Server and Application Performance Monitoring</li> <li>Papertrail: Centralized logging and alerting</li> <li>Pingdom: Make sure your site is responding to requests</li> </ul> <p>As many of our users have never actually maintained a server, we can certainly do more to help push our them in the right direction. In the next few weeks, we will be putting together a document that will gently push our users towards providers that may be able to take care of their needs, as well as clearly delineate where Dokku draws the line in the sand in terms of server management.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","resource-management"]},{"location":"2016/welcome-to-dokku/","title":"Welcome to Dokku!","text":"<p>Hi all! The dokku maintainers finally decided it was a good idea to have a blog to post thoughts on the development, evolution, and roadmap of Dokku. Our goal with these posts is to help inform you - dokku users and developers - as to where dokku is headed both internally and externally.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","update"]},{"location":"2016/welcome-to-dokku/#what-is-dokku","title":"What is dokku?","text":"<p>Dokku is a docker-powered PaaS that helps you build and manage the lifecycle of applications.</p> <p>That is the spiel you get from our Site's metadata, the blurb on github, and even the footer on this blog. But what does it actually mean?</p> <p>Dokku is a somewhat loose set of scripts that are combined together as a sort of \"build\" pipeline. The input is your code, and the output is (hopefully) a running application. The pipeline looks something like the following:</p> <pre><code>git push dokku master\n# magic\ncurl -kSso /dev/null -w \"%{http_code}\" \"http://your-app.example.com\" | grep 200\n</code></pre>","tags":["dokku","update"]},{"location":"2016/welcome-to-dokku/#what-is-magic-in-the-dokku-pipeline","title":"What is \"magic\" in the dokku pipeline?","text":"<p>The \"magic\" comes from several pieces of tech:</p> <ul> <li><code>sshcommand</code>: kicks off the proper dokku command on git push.</li> <li><code>plugn</code>: allows us to coordinate the stdin/stdout/stderr bits of the pipeline.</li> <li><code>herokuish</code>: allows us to emulate - to a very high degree - the inner workings of heroku.</li> <li>various scripts that implement the bulk of our feature-set.</li> </ul> <p>All three named pieces of software came from the original creator of Dokku, Jeff Lindsay. Both <code>sshcommand</code> and <code>plugn</code> are now wholly maintained by the Dokku Team, while the latter is currently under the care of Glider Labs, with maintenance being done by the Dokku Team as necessary.</p>","tags":["dokku","update"]},{"location":"2016/welcome-to-dokku/#what-are-these-various-scripts","title":"What are these \"various scripts\"?","text":"<p>It's important to note that dokku is by and large composed of shell scripts targeting modern bash. Why?</p> <ul> <li>Shell is relatively easy to pick up.</li> <li>Modern bash is available almost everywhere.</li> <li>Interacting with docker was initially only available via shell scripting.</li> </ul> <p>Features are built as \"plugins\" which are triggered by <code>plugn</code>. For example, here are a few different official plugins:</p> <ul> <li>config: a plugin for managing environment variables.</li> <li>checks: a plugin for checking that your application starts properly before bringing it into rotation.</li> <li>storage: a persistent storage plugin for use with applications that do not (yet) conform to all 12-factor design requirements.</li> </ul> <p>Plugins can be built in any language - in fact, some prototypes have been written in a hybrid of golang/bash or python. For the foreseeable future, however, we do not envision rewriting the core in another language.</p>","tags":["dokku","update"]},{"location":"2016/welcome-to-dokku/#what-is-the-goal-of-dokku","title":"What is the goal of dokku?","text":"<p>Dokku's goal is to provide a simple, hackable build environment for developers to quickly get their code from their laptops into the cloud. Our personal goal is to make the deployment part easy, so all you have to do is worry about writing code.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","update"]},{"location":"2018/the-dokku-experience/","title":"The Dokku Experience","text":"<p>Dokku has historically had no way to introspect on the state of an installation. At one point in its history, we included a \"backup\" feature, which allowed users to export - and maybe import - configuration and data. The challenge is in exposing this information in an easily parseable manner.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","interfaces"]},{"location":"2018/the-dokku-experience/#plumbing-vs-porcelain","title":"Plumbing vs Porcelain","text":"<p>To understand the challenges better, it is important to note that the internal representation of the state of Dokku is very different from how users interact with it. Data is stored in either <code>/home/dokku/APP</code> or <code>/var/lib/dokku</code>. Plugins may also store data on another host, and some implementations of the config plugin actually store configuration in distributed datastores. Dokku interacts with this data via a series of plugins - written in various languages - through <code>plugn</code>. This hairy mess is Dokku's Plumbing.</p> <p>Externally, developers use the <code>dokku</code> cli to orchestrate their applications. This is a well-known interface with clear documentation and usage examples. The cli rarely changes drastically, only doing so to allow for new functionality in a way that does not break existing use. The output format also rarely changes in backwards incompatible ways. If you know how to use one Dokku installation from 2 years ago, a modern install will be extremely familiar to you. This nice interface is called the Porcelain.</p> <p>The analogy is thus: most folks using a restroom are well-acquainted with a toilet, every toilet is similar, allowing for differences in color, size, and features - a bidet could be nice, as could an auto-flush feature. Very few folks know anything about the pipes that move waste and water around, only caring when it is broken or needs updating to support newer toilet features. The important thing is that you know how to use the toilet, that it does what you expect, and that you don't need to re-learn how to use it.</p>","tags":["dokku","interfaces"]},{"location":"2018/the-dokku-experience/#a-common-interface","title":"A Common Interface","text":"<p>When you use Dokku, you'll notice a few things:</p> <ul> <li>Plugins almost always show help with no specified subcommand.</li> <li>Config is down via <code>:set</code>, and exposed via <code>:report</code>.</li> <li>The primary object being manipulated always comes first, so <code>APP</code> is commonly the first argument.</li> </ul> <p>If you use Dokku, you only need to learn those patterns once. It is easy to figure out what is available, and straightforward to introspect upon the state of the system. This translates into the following:</p> <ul> <li>Easy decisions around how to expose new functionality (how did we do it the last time?)</li> <li>Decreased support headaches from users getting acquainted with the system (fewer folks hunting for the answer)</li> <li>Delightful experiences for our users!</li> </ul> <p>One thing I didn't touch upon is that our output is more or less machine parseable. It is not in json/xml/toml, but you can easily:</p> <ul> <li>Hide all extraneous headers and output (<code>--quiet</code>)</li> <li>Use flags to grab specific bits of output</li> <li>Split <code>:report</code> output on well-known delimiters (<code>:</code>)</li> </ul> <p>The consistency here paves the way for automation.</p>","tags":["dokku","interfaces"]},{"location":"2018/the-dokku-experience/#interfacing-with-dokku","title":"Interfacing with Dokku","text":"<p>While we have a cli aimed at humans, as developers, we yearn for interfaces computers can automate. Our next blog post will cover how developers may interact with Dokku in a declarative fashion in order to ensure that their servers and applications are configured as expected.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","interfaces"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/","title":"Comparing Cloud Native Buildpacks to Herokuish","text":"<p>An upcoming piece of technology in the container space is Cloud Native Buildpacks (CNB). This is an initiative led by Pivotal and Heroku and contributed to by a wide range of community members, and one that the Dokku project has been following fairly closely. CNB builds upon the buildpack \"standard\" initially developed at Heroku, modified at Pivotal for Cloud Foundry, and used/abused by the <code>gliderlabs/herokuish</code> project. This post goes over a small amount of history, compares buildpack implementations across vendors, and talks about the future of buildpacks as they relate to Dokku.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#history-channel-vault","title":"History Channel Vault","text":"<p>When Heroku first launched, they provided support for Rack applications, which worked fairly well for the budding Ruby community. As the Ruby community grew, this initial support started to become limiting for their users, and thus the Heroku community started reworking their internal tech to be more flexible in functionality they supported and how they launched processes, In fact, a lot of the fancy features and patterns you'll see in a modern PaaS - 12 factor apps, Procfile support, etc. - were first prototyped or promoted by Heroku. The process of detecting support, building app slugs, and releasing the built artifacts was one such initiative. Eventually, Heroku rebuilt their platform to support alternative programming runtimes as well as community contributed runtimes in what is now known as a buildpacks.</p> <p>As time marched on, the Cloud Foundry software from Pivotal picked up the buildpack tech. This would seem like an overall great thing for the community - buildpacks that have better support for enterprise environments and needs would certainly help with adoption in the corporate world - but ended up being not as great. As there was no real specification for Buildpack technology, Pivotal ended up diverging from Heroku's implementation, resulting in:</p> <ul> <li>Buildpack v2a: Heroku-style buildpacks</li> <li>Buildpack v2b: Cloud Foundry-style buildpacks</li> </ul> <p>For buildpack authors, the standards were largely compatible - and it would likely be possible to support both at once - but in practice you really only wrote a buildpack for the platform you were using. This also meant that new features for, say, the NodeJs buildpack would need to be implemented twice in order to be supported on these two platforms.</p> <p>Additionally, the buildpack spec never specified anything about the underlying platform, so building a buildpack for Heroku's platform that depends on some OS-level dependency might not work at all when used with Cloud Foundry or vice versa.</p> <p>Suffice to say, this divergence isn't great for the community, nor great for pushing the technology forward. I'll skip all the details - mostly because I don't know them! - but the emergence of containers and related technologies enabled the folks at Heroku and Pivotal to combine efforts to on a unified v3 specification, which is now CNB. Think of it as two mini lion bots coming together to form one super-bot!</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#comparing-buildpack-tech","title":"Comparing Buildpack tech","text":"<p>While the new specification - still under development - provides a new, unified way to create and distribute buildpacks, there can still be differences between platforms. At this point in time, there are actually two different main \"builders\" - a collection of buildpacks - that folks in the community can use to play around with CNBs (both are based on the Bionic stack). They do provide slightly different functionality, so a comparison between them seems like a reasonable thing to do. We'll also compare CNBs to <code>gliderlabs/herokuish</code>, which is the main OSS implementation of the buildpack v2a technology.</p> <p>Note</p> <p>At the time of writing, Heroku's builder contains v2a buildpacks with a shim to allow them to run under the v3 specification. Additionally, there is a possibility that the organizations will collaborate on buildpacks in the future - who wants to rebuild the wheel? - but this is sort of all in the air. Please keep this in mind if reading this blog post a few months/years from the time of publication.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#installing-dependencies","title":"Installing dependencies","text":"<p>For local testing, the CNB project provides the <code>pack</code> cli tool to simulate what would be available in a platform. There are related projects for Kubernetes and other tools in the deployment space, but <code>pack</code> is great for local testing, so we'll want to install that.</p> <pre><code># on a mac with homebrew\nbrew install buildpacks/tap/pack\n\n# everywhere else, go to the following page and download a release\n# https://github.com/buildpacks/pack/releases\n</code></pre> <p>CNB splits buildpacks such that there is a \"build\" base image and a \"run\" base image. Apps are built within the <code>build</code> base image and then the layers are rebased onto the <code>run</code> image for distribution. This allows for the distributed image to be smaller in size, as well as avoids the need for distribution of compile-time dependencies. Both of these images need to be available on the machine that is running the build process.</p> <pre><code># cloudfoundry\ndocker image pull cloudfoundry/cnb:latest     # build\ndocker image pull cloudfoundry/run:full-cnb   # run\n# heroku\ndocker image pull heroku/buildpacks:18        # build\ndocker image pull heroku/pack:18              # run\n</code></pre> <p>On the herokuish side, there is a single image that contains both compile and runtime dependencies. You can export a slug from the built image and run that on a system without the installed runtime dependencies, but in practice very few people do so.</p> <pre><code>docker image pull gliderlabs/herokuish:latest # build and run\n</code></pre> <p>Neither Cloud Foundry nor Heroku currently publish a <code>Dockerfile</code> for their images, so they are still somewhat of a black box. It's also not super clear from the documentation as to what the <code>bionic</code> stack is. We can only hope - but not assume - that these will be published for public recreation in the future.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#building-apps","title":"Building apps","text":"<p>The app we'll be playing with is the node-js-getting-started app by Heroku. You can play around with your own app to see the results; also NodeJs is currently supported with both builders as well as the <code>gliderlabs/herokuish</code> project.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#with-cnb","title":"With CNB","text":"<p>Building an app with CNB is the same regardless of your chosen builder, which is nice. The following command will build the app in the current directory with the Cloud Foundry builder:</p> <pre><code>pack set-default-builder cloudfoundry/cnb:latest\npack build --no-pull --path . \"app/nodejs-cloudfoundry:latest\"\n</code></pre> <p>Whereas utilizing the Heroku builder is not much different:</p> <pre><code>pack set-default-builder heroku/buildpacks:18\npack build --no-pull --path . \"app/nodejs-heroku:latest\"\n</code></pre> <p>Note that there is a volume cache used for dependencies for both buildpacks. At the time of writing, this can be computed like so:</p> <pre><code>IMAGE=\"app/nodejs-cloudfoundry:latest\"\nCACHE_VOLUME=\"pack-cache-$(echo -n \"index.docker.io/$IMAGE\" | sha256sum | cut -c1-12).build\"\n</code></pre> <p>At the time of writing, there isn't a way to clear out that cache volume, so you can use the above method to compute the volume name. Please note that clearing this cache volume does not necessarily clear out any app image layers created, so this may not do exactly as you'd expect if you are interacting with a remote registry.</p> <p>If you are rebuilding an app using pack, you'll notice that there doesn't appear to be any caching with the Heroku builder. This might be a bug due to shim usage, and will likely be resolved in the future, but for now should expect this to be the case.</p> <p>Note</p> <p>As an aside, the <code>buildpacks/lifecycle</code> project - and therefore pack - creates OCI compatible images, so tooling that only works with the older Docker Image Specification may fail when using pack-built images.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#with-herokuish","title":"With Herokuish","text":"<p>Building an image with <code>gliderlabs/herokuish</code> is a bit more complicated. While it is distributed as a binary and a docker image, most folks default to using the docker image. Some platforms - notably Gitlab - utilize it via a <code>Dockerfile</code>, but this doesn't allow you to take advantage of build cache. The below simulates the patterns used by the <code>pack</code> cli tool:</p> <pre><code># use a cache volume\n# this can also be substituted with a directory on disk\nCACHE_VOLUME=\"pack-cache-$(echo -n \"index.docker.io/$IMAGE\" | sha256sum | cut -c1-12).build\"\ndocker volume rm $CACHE_VOLUME &gt;/dev/null 2&gt;&amp;1|| true\ndocker volume create $CACHE_VOLUME &gt;/dev/null\n\n# run the build process\nIMAGE=\"app/nodejs-herokuish:latest\"\ndocker container run --cidfile /tmp/cid --env USER=herokuishuser -v \"${CACHE_VOLUME}:/tmp/cache\" -v $PWD:/tmp/app gliderlabs/herokuish:latest /bin/herokuish buildpack build\n\n# create your final image\ndocker container commit $(cat /tmp/cid) \"$IMAGE\"\n# cleanup\ndocker container rm $(cat /tmp/cid)\nrm -f /tmp/cid </code></pre>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#running-an-app","title":"Running an app","text":"<p>This part is likely the most similar thing across all platforms. Both the CNB images utilize a special <code>launcher</code> process to run your process type for you, so all you really need to do is specify that process type.</p> <pre><code># cloudfoundry\ndocker container run -d -p 5000 --env PORT=5000 --name app.nodejs.cloudfoundry app/nodejs-cloudfoundry:latest web\n</code></pre> <p>Docker log output on that container looks something like the following:</p> <pre><code>&gt; node-js-getting-started@0.3.0 start /workspace\n&gt; node index.js\n\nListening on 5000\n</code></pre> <p>Heroku is pretty similar</p> <pre><code># heroku\ndocker container run -d -p 5000 --env PORT=5000 --name app.nodejs.heroku app/nodejs-heroku:latest web\n</code></pre> <pre><code>Listening on 5000\n</code></pre> <p>With herokuish, you need to execute the process type with the <code>/start</code> prefix. We also need to specify the <code>USER</code>, as this will be used by herokuish to properly set file permissions on the <code>/app</code> directory.</p> <pre><code>docker container run -d -p 5000 --env PORT=5000 --env USER=herokuishuser --name app.nodejs.herokuish app/nodejs-herokuish:latest /start web\n</code></pre> <pre><code>Listening on 5000\n</code></pre> <p>Startup time is a bit longer with <code>herokuish</code> as it will change ownership on files within the <code>/app</code> directory.</p> <p>Another difference between the two is the environment within which both images run in, which we'll get into next.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#inspecting-the-built-image","title":"Inspecting the built image","text":"<p>Once we have a running app, lets inspect our artifact.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#with-cnb_1","title":"With CNB","text":"<p>Executing a command on the CNB-backed containers is the same as executing a command with any other docker image. Processes are automatically invoked within the correct app environment, which is great for one-off commands.</p> <pre><code># cloudfoundry\ndocker container exec app.nodejs.cloudfoundry id\n</code></pre> <pre><code>uid=2000(vcap) gid=2000(vcap) groups=2000(vcap)\n</code></pre> <pre><code># heroku\ndocker container exec app.nodejs.heroku id\n</code></pre> <pre><code>uid=1000(heroku) gid=1000(heroku) groups=1000(heroku)\n</code></pre> <p>Ditto for process inspection:</p> <pre><code># cloudfoundry\ndocker container exec app.nodejs.cloudfoundry ps auxf\n</code></pre> <pre><code>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nvcap        35  0.0  0.1  34404  2856 ?        Rs   02:43   0:00 ps auxf\nvcap         1  1.2  2.2 739020 45136 ?        Ssl  02:43   0:00 npm\nvcap        22  0.0  0.0   4632   828 ?        S    02:43   0:00 sh -c node index.js\nvcap        23  0.6  2.0 573156 41896 ?        Sl   02:43   0:00  \\_ node index.js\n</code></pre> <pre><code># heroku\ndocker container exec app.nodejs.heroku ps auxf\n</code></pre> <pre><code>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nheroku      22  0.0  0.1  34404  2856 ?        Rs   02:47   0:00 ps auxf\nheroku       1  0.9  1.7 566792 36728 ?        Ssl  02:46   0:00 node index.js\n</code></pre> <p>Please bear in mind that PID 1 in the container will depend upon what the buildpack launches. Aside from that note, there is nothing new with CNB and pack in regards to running commands when compared to normal docker operations, so anyone familiar with Docker will feel right at home.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#with-herokuish_1","title":"With Herokuish","text":"<p>On the herokuish platform, a process must be executed with the <code>/exec</code> command as a prefix. This will give you an environment that simulates running a command in the heroku stack.</p> <pre><code>docker container exec app.nodejs.herokuish /exec id\n</code></pre> <p>The output of the above command is:</p> <pre><code>uid=32767(herokuishuser) gid=32767(herokuishuser) groups=32767(herokuishuser)\n</code></pre> <p>Inspecting processes is pretty similar:</p> <pre><code>docker container exec app.nodejs.herokuish /exec ps auxf\n</code></pre> <pre><code>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot       287  0.0  0.1   5628  2448 ?        Ssl  02:57   0:00 /exec ps auxf\nherokui+   298  0.0  0.1  34404  2844 ?        R    02:57   0:00  \\_ ps auxf\nroot         1  0.2  0.1   5628  2448 ?        Ssl  02:57   0:00 /start web\nherokui+    13  2.7  1.9 566160 40020 ?        Sl   02:57   0:00 node index.js\n</code></pre> <p>You'll notice that, in addition to your app, there is also the <code>/start web</code> process. This spawns your app with the correct environment, so just a bit different from CNB containers.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#cleaning-up","title":"Cleaning up","text":"<p>Removing the containers and images is relatively straightforward, as we use traditional docker commands.</p> <pre><code># cloudfoundry\nIMAGE=\"app/nodejs-cloudfoundry:latest\"\nCACHE_VOLUME=\"pack-cache-$(echo -n \"index.docker.io/$IMAGE\" | sha256sum | cut -c1-12).build\"\ndocker volume rm $CACHE_VOLUME &gt;/dev/null 2&gt;&amp;1|| true\ndocker container rm -f app.nodejs.cloudfoundry &gt;/dev/null 2&gt;&amp;1|| true\ndocker image rm cloudfoundry/run:base-cnb cloudfoundry/run:full-cnb cloudfoundry/cnb:latest &gt;/dev/null 2&gt;&amp;1|| true\ndocker image rm app/nodejs-cloudfoundry:latest &gt;/dev/null 2&gt;&amp;1|| true\n# heroku\nIMAGE=\"app/nodejs-heroku:latest\"\nCACHE_VOLUME=\"pack-cache-$(echo -n \"index.docker.io/$IMAGE\" | sha256sum | cut -c1-12).build\"\ndocker volume rm $CACHE_VOLUME &gt;/dev/null 2&gt;&amp;1|| true\ndocker container rm -f app.nodejs.heroku &gt;/dev/null 2&gt;&amp;1|| true\ndocker image rm heroku/pack:18 heroku/buildpacks:18 &gt;/dev/null 2&gt;&amp;1|| true\ndocker image rm app/nodejs-heroku:latest &gt;/dev/null 2&gt;&amp;1|| true\n# herokuish\nIMAGE=\"app/nodejs-herokuish:latest\"\nCACHE_VOLUME=\"pack-cache-$(echo -n \"index.docker.io/$IMAGE\" | sha256sum | cut -c1-12).build\"\ndocker volume rm $CACHE_VOLUME &gt;/dev/null 2&gt;&amp;1|| true\ndocker container rm -f app.nodejs.herokuish &gt;/dev/null 2&gt;&amp;1|| true\ndocker image rm gliderlabs/herokuish:latest &gt;/dev/null 2&gt;&amp;1|| true\ndocker image rm app/nodejs-herokuish:latest &gt;/dev/null 2&gt;&amp;1|| true\n</code></pre>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#dokku-and-cloud-native-buildpacks","title":"Dokku and Cloud Native Buildpacks","text":"<p>In an ideal world, all the functionality currently provided by Heroku's v2a Buildpacks and its ecosystem would immediately exist with Cloud Native Buildpacks. Unfortunately, the spec is still evolving - though nearing a v1! - and the user-base is comparatively small. If you are a buildpack author or a vendor using buildpack technology, now is likely the best time to get involved and raise concerns with the spec and ecosystem.</p> <p>That said, Dokku has active development towards the addition of CNB to the platform. In our case, we will likely have it as an experimental feature controlled through the use of environment variables, and folks will be able to switch their installations between CNB and Herokuish. This will also likely require changes to certain plugins - in particular, those that interact with the built images - but these will hopefully be fairly minimal.</p> <p>Long-term, the plan is to deprecate and eventually remove gliderlabs/herokuish support. The purpose of the Herokuish project was to allow folks to emulate the Heroku build/runtime environment. Heroku - amongst others - will be moving to CNB at some point, and already provide a shim for existing buildpacks in the new system. So in theory, any CNB platform would be able to use that shim + any tooling that supports CNB for buildpack support.</p> <p>The <code>pack</code> cli tool already provides a way for folks to build and run applications, and analogs for most herokuish cli commands. Given that:</p> <ul> <li><code>pack</code> already exists</li> <li>Can support existing v2a buildpacks via shim (Heroku Buildpacks)</li> <li>Is actively maintained by the CNB folks and a larger community</li> <li>Can run inside of a container with a socket mounted, similar to how herokuish runs</li> </ul> <p>The best course of action is for Herokuish to become unsupported once <code>pack</code> hits a stable release. It is unlikely that support for Herokuish will continue at that point, and only general maintenance work (upgrading buildpacks) would be performed at that time. Long-term, the project will likely be archived completely in favor of the upstream CNB projects.</p> <p>There isn't any timeline for the above other than experimental support for CNB in Dokku will land at some point in the near future, so folks installing and using Dokku won't need to worry too much about the process. Long-term, there will be a migration path outlined for users, and how that impacts users will depend on how much tooling is necessary to shim in the existing ecosystem around buildpacks. We hope to keep this minimal, but sometimes you need to break some eggs to make an omelette.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/comparing-buildpack-v3-to-herokuish/#cloud-native-buildpacks-are-the-future","title":"Cloud Native Buildpacks are the future","text":"<p>The Dokku project is incredibly excited about Cloud Native Buildpacks and it's implications for speeding up how we build secure applications and services. While the existing community is fairly small, the contributors are very dedicated to getting everything just right, and we expect that this will be a great boon to users of both Dokku and buildpacks in general.</p> <p>If you'd like to have a say in how the CNB initiative develops, please feel free to join in with development or comment in the Slack community - they are a bunch of very friendly folks - where much of the current development is focused.</p> <ul> <li>Blog: https://medium.com/buildpacks</li> <li>Github: https://github.com/buildpacks</li> <li>Mailing List: https://lists.cncf.io/g/cncf-buildpacks</li> <li>Site: https://buildpacks.io/</li> <li>Slack: https://slack.buildpacks.io/</li> <li>Twitter: https://twitter.com/buildpacks_io</li> </ul> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","buildpacks","herokuish"]},{"location":"2020/dokku-0.20.0/","title":"Dokku Release 0.20.0","text":"<p>Dokku version 0.20.0 - and a few follow-on bugfixes - was released this week with quite a few major improvements, mostly to proxying and networking. We'll go over major changes below.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#changes","title":"Changes!","text":"","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#code-deprecations-and-removals","title":"Code Deprecations and Removals","text":"<p>As noted in the migration guide, we removed quite a few default commands. These were replaced with <code>:help</code> output, and <code>:list</code> commands were provided where possible.</p> <p>We've also dropped support for unsupported versions of Debian and Ubuntu. Dokku no longer runs tests on older versions of Ubuntu, and Debian support for older releases was completely untested. While newer packages may work in the future, users should upgrade their operating systems where possible.</p> <p>Finally, quite a bit of code was moved into golang, and as such certain shell functions are deprecated in favor of new plugin triggers. Usage will trigger warnings in logging output. Please switch to the new triggers in custom plugins where possible, as we well continue to remove deprecated code in the future.</p>","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#custom-networks","title":"Custom networks","text":"<p>In previous versions of Dokku, containers could only communicate with each other through one of the following methods:</p> <ul> <li>An intermediate datastore, whether that be a database, queuing system, or caching layer.</li> <li>Open network</li> <li>Adding <code>--network</code> docker-options flag</li> </ul> <p>The first option was great for apps that were architected to do message passing, but almost a non-starter for certain self-hosted apps. Even for new apps, adding an intermediate communication layer will always increase the number of problems that could occur in a system, so it was far from optimal.</p> <p>Sending traffic over the open network is not great as for many users, this would mean traffic over the internet. Sending traffic over the open network increases latency between requests, increases bandwidth usage - and costs! - and opens users to potential security issues regardless of SSL encryption. Suffice to say that this was also not a great solution.</p> <p>Adding a custom <code>--network</code> flag via the docker-options plugin works well enough but has a few issues itself:</p> <ul> <li>Does not allow for multiple networks</li> <li>Disables nginx traffic proxying</li> <li>Not great from a UX perspective</li> </ul> <p>A user created a custom plugin to attach on to networks after deploy, but this also has the side effect of not supporting containers that need to talk to a specific network on boot.</p> <p>With the new network support added in 0.20.0, users can easily create/destroy attachable docker networks, and ensure apps attach to those networks at the correct time for their apps via two easy-to-configure hooks. From the documentation:</p> <ul> <li><code>attach-post-create</code>:</li> <li>Phase it applies to:<ul> <li><code>build</code>: Intermediate containers created during the build process.</li> <li><code>deploy</code>: Deployed app containers.</li> <li><code>run</code>: Containers created by the <code>run</code> command.</li> </ul> </li> <li>Container state on attach: <code>created</code> but not <code>running</code></li> <li>Use case: When the container needs to access a resource on the network.</li> <li>Example: The app needs to talk to a database on the same network when it first boots.</li> <li><code>attach-post-deploy</code></li> <li>Phase it applies to:<ul> <li><code>deploy</code>: Deployed app containers.</li> </ul> </li> <li>Container state on attach: <code>running</code></li> <li>Use case: When another container on the network needs to access this container.</li> <li>Example: A background process needs to communicate with the web process exposed by this container.</li> </ul> <p>This feature has been a long time coming - it was originally reported in 2016 - and was also a ton of work, but we hope that it provides great value to our users.</p> <p>Here is a fun incoming bandwidth chart of a user switching to the new network support for their apps:</p> <p></p> <p>See the network documentation for more information</p>","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#routing-non-web-containers","title":"Routing non-web containers","text":"<p>Users wishing to route non-web containers would previously have to either hack their nginx config or use a custom plugin to try and inject location and upstream blocks into the correct place. The lack of built-in support made it difficult to support cases where there might be a websocket process, or some command-and-conquer service that exposed a tcp connection in addition to the traditional web process.</p> <p>As of 0.20.0, we now inject a custom <code>.DOKKU_APP_${PROCESS_TYPE}_LISTENERS</code> variable into all <code>nginx.conf.sigil</code> files. This will allow folks to inject http(s) processes into the nginx.conf.sigil, which brings initial support for proxying non-web processes.</p> <p>Future improvements might include <code>tcp</code> support - via the nginx <code>stream</code> module - and injection of custom location blocks for even easier proxying of non-web processes.</p> <p>Users are encouraged to switch their custom configs to use the new <code>.DOKKU_APP_WEB_LISTENERS</code> variable when constructing upstreams. See the nginx template documentation for more information.</p>","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#hsts-enabled-by-default","title":"HSTS Enabled by Default","text":"<p>If you have an SSL certificate and are proxying requests using the <code>nginx</code> plugin, then HSTS will be enabled by default. It is enabled by default - including for subdomains - though without browser preloading. Please note that the default cache setting is 182 days, so pre-configure this value if you believe you will need to manipulate HSTS support.</p> <p>See the nginx hsts documentation for more information.</p>","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#restarting-docker-containers-recover-from-ip-changes","title":"Restarting docker containers recover from IP changes","text":"<p>Docker has undefined behavior around IP address persistence when containers restart, either due to failure or because of server reboot. This has resulted in issues where restarting containers lose their IP addresses, breaking any proxy method that is associated with a container IP instead of the container name (read: how Dokku works!). This sometimes caused nasty issues where apps deployed on Dokku might mistakenly have their nginx route incorrect apps to users on server reboot, or just straight-up fail to serve requests even when the app is working after a container restart.</p> <p>In 0.20.2, we included the dokku-event-listener as a recommended package. It is usable with older versions of dokku, and can be installed like so:</p> <pre><code># update your apt repository\napt update\n\n# install it!\napt install dokku-event-listener\n</code></pre> <p>The <code>dokku-event-listener</code> daemon will properly listen to container events - start, restart, delete, destroy, die - and reload the nginx config for the related app as appropriate. It will even rebuild the application if we've hit the max container restart count. It will also output debug logging that you can use to correlate application crashes with service outages.</p>","tags":["dokku","release"]},{"location":"2020/dokku-0.20.0/#future-development","title":"Future development","text":"<p>As Dokku continues to mature towards a 1.0 target, the following areas will be of greater focus in upcoming releases:</p> <ul> <li>Security Improvements:</li> <li>The web configuration tool is sometimes neglected by new users, which enables malicious clients to run take over servers by running arbitrary apps. We'll replace this with a page that instructs users to connect to the server and run through a sort of \"first start\" process.</li> <li>SELinux is here to stay, but Dokku does not always play nice. In an ideal world, Dokku will be well-tested in common SELinux configurations, with issues and workarounds documented for the more security-minded.</li> <li>High Availability Support: We've traditionally said that Dokku will focus on being the single-server solution for self-hosting apps, but that doesn't mean we cannot have better high availability support through official plugins and dependencies.</li> <li>External configuration storage: The property system first pioneered in 0.12.0 for the git plugin has seen many improvements. The hope is to abstract property manipulation into a third-party project - prop - that can connect to an arbitrary backend. This will require changes within Dokku to migrate to the properties system in addition to the development of the <code>prop</code> tool, but should be a great way to enable easier backups for Dokku installations from a configuration standpoint.</li> <li>Scheduler Plugins: The Kubernetes and Nomad plugins are here to stay, though they'll need more love to become more fleshed out. While there is active development for the kubernetes scheduler plugin, neither has tight proxying integration, so users are somewhat on their own there.</li> <li>Datastore plugins: The existing datastore plugins are meant for single-server installations. Could we wrap a project such as KubeDB or other operators to provide a nicer way of manipulating datastores in your cluster? What does this look like for Nomad? While this might be something of a dead end, it would be an interesting approach to lightly introducing Dokku users to more cloud-native methods of managing datastores.</li> <li>Buildpack V3: Dokku currently users <code>gliderlabs/herokuish</code> to provide automatic build support through buildpacks. We'll go into more detail in an upcoming post, but Cloud Native Buildpacks are the future of Dokku, and we hope that they will improve the speed and reliability of your builds.</li> </ul> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop onto our IRC or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/","title":"Dokku Release 0.23.0","text":"<p>Dokku version 0.23.0 was released this weekend with quite a few major improvements for many common workflows. We'll go over major changes below.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#new-core-contributors","title":"New Core Contributors","text":"<p>With the new release, a few folks have been added as contributors to the project.</p> <ul> <li>Richard Willis (@badsyntax) has been contributing a bit to various projects, most notably some great ideas to the official Github Action.</li> <li>Milan Vit (@cellane) has contributed significant bug reports over the past year and has been a great source of community feedback.</li> <li>Leopold Talirz (@ltalirz) has been the unofficial (and well, now official) steward of the Ansible Modules for quite a while now, and has made great efforts at making the code testable and reusable.</li> </ul> <p>These folks have been added as Github Triagers to various projects. This means they'll have increasing control over the future of the project and features they think they'd like in the core, as well as how those things might be developed over time. You can think of them as community++ :)</p> <p>While they have been added as core contributors, as this is an Open Source Project, there is no requirement of any work from them. This is simply recognition for the great work they've done to support Dokku.</p> <p>How do you join? There are a number of ways to Contribute to the project, code and otherwise. As we continue to clean up various projects under the Dokku umbrella, more folks will be added (and removed as necessary) to help push the project forward. We hope that this helps unblock pull requests from being merged, features from being developed, and bugs from being squashed.</p> <p>Thanks to the folks above and all community contributors. It would be hard to imagine Dokku without all of you pushin the project forward.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#changes","title":"Changes","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#circleci-github-actions","title":"CircleCI =&gt; Github Actions","text":"<p>CircleCI was and remains a great service - we'll continue to use them for other projects unless there is a real need to switch. They certainly provide a wide-range of features, and will be the recommended CI stack for folks needing serious CI functionality.</p> <p>That said, our CircleCI usage was limited for a few reasons:</p> <ul> <li>Parallelism limits due to using an OSS plan caused CI runs to execute for an hour+, which isn't great for quick feedback cycles.</li> <li>Until recently, CircleCI had no support for self-hosted runners. They are currently only availabe for paid plans.</li> <li>No current ARM support, making any future work towards a potential ARM version of Dokku... not possible.</li> <li>Machine images are limited in OS version, and currently only support 16.04 and 20.04 (in beta). They've also been fairly slow to add support for new OS versions (as shown by the late and still beta 20.04 support). As we continue to work on Dokku, we need to test on modern, supported operating systems, and not being able to do so limits our testing capabilities.</li> </ul> <p>With 0.23.0, we've switched to Github Actions, which provides the following benefits:</p> <ul> <li>Higher parallelism, to the point that the full test suite runs in around 20 minutes.</li> <li>More varied OS and Architecture support. I for one will love the day when I can finally run Dokku on my Raspberry Pi...</li> <li>Deeper integration with Github itself.</li> </ul> <p>While not all functionality has been carried over - in particular, test statistics are missing, it is impossible to re-run only failing jobs, and running jobs with SSH for debugging is a bit more difficult - it is hoped that the change makes the process of developing new functionality much easier for the average contributor.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#bug-fixes","title":"Bug Fixes","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#image-labeling","title":"Image Labeling","text":"<p>Dokku introduced label-schema.org support as part of 0.18.0 back in August of 2019. While Label Schema is no longer actively maintained - in favor of OCI Annotations tha we'll properly support in the near future - we still label images and labels according to that spec. Unfortunately, our labeling support left a lot to be desired.</p> <ul> <li>Labeling added a new layer and did not take into account previously set layers. Continued <code>ps:restart</code> calls would add the same labels over and over.</li> <li>Labels did not work for Dockerfile or Image deploys that used an <code>ONBUILD</code> directive, and would re-trigger those <code>ONBUILD</code> directives in directories that may not have a build context. We actually disabled labeling support for such images in 0.22.x.</li> <li>Intermediate containers were required for labels, causing deploys to be longer in certain cases.</li> </ul> <p>As of 0.23.0, the Dokku project now uses docker-image-labeler to inject labels only when necessary, and avoids building new containers entirely. This should have no real impact on produced images, though will reset layer create times as a side effect (a limitation that may be removed in the future).</p> <p>We'll continue to investigate similar ways to speed up the build process for all of our users in future releases.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#libpam-tmpdir-support","title":"<code>libpam-tmpdir</code> support","text":"<p>As part of an increased focus on security, we've added proper <code>libpam-tmpdir</code> support. The actual problem was due to how we attempt to drop permissions via the <code>sudo</code> binary without resetting certain environment variables.</p> <p>While the fix was relatively simple - just unsetting some variables - our implementation of permission dropping certainly leaves something to be desired. Enterprising individuals who wish to contribute to the project and have expertise in this area would certainly be welcomed!</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#new-features","title":"New Features","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#buildpack-stack-builder-management","title":"Buildpack Stack Builder Management","text":"<p>In previous releases, users of derivative <code>gliderlabs/herokuish</code> images would need to specify a <code>DOKKU_IMAGE</code> environment variable in order to use their version over what we ship by default. While this was a reasonable approach that worked when there was only one <code>herokuish</code> image version being maintained, we've recently decided to add support for building both <code>18.04</code> and <code>20.04</code> based images. Additionally, this approach does not work at all for our Cloud Native Buildpack support.</p> <p>As of <code>0.23.0</code>, there is now a way to set the stack builder image in use. Herokuish users (the majority of Dokku users at this time) will be able to specify either the 18.04, 20.04, or any other image as follows:</p> <pre><code># app-specific command\ndokku buildpacks:set-property $APP $SOME_IMAGE\n# global command\ndokku buildpacks:set-property --global stack $SOME_IMAGE\n</code></pre> <p>Any tag listed on Docker Hub can be used, and folks can derive their custom herokuish image as needed for their own platforms. For general users, we highly recommend sticking to the shipped defaults.</p> <p>Cloud Native Buildpack users have access to the same command, and can use it to specify an alternative builder image. Below switches the global builder image from <code>heroku/buildpacks</code> to the packeto buildpacks maintained by CloudFoundry:</p> <pre><code>dokku buildpacks:set-property --global stack paketobuildpacks/build:base-cnb\n</code></pre> <p>We'll continue working to add full support for buildpacks commands to the Cloud Native Buildpack support, and hope this initial work makes it easier to use.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#container-logrotation","title":"Container Logrotation","text":"<p>With the addition of Vector-based Log Shipping in 0.22.x, we still had a need to ensure logs didn't consume host resources. Assuming default docker log settings, it is now possible to set the docker log retention via <code>logs:set</code>:</p> <pre><code>dokku logs:set --global max-size 20m\n</code></pre> <p>This new setting injects a property into the <code>docker run</code> calls (though is exposed via trigger for alternative schedulers), defaults to <code>10m</code>, and can be set both globally and on a per-app basis. Please rebuild your apps to have this come into effect.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#nginx-configuration","title":"Nginx Configuration","text":"<p>While having a sane default is great, often-times users will need to customize their nginx proxy configuration to meet their needs. Vendoring a custom <code>nginx.conf.sigil</code> makes it more difficult for us to ship security updates to users, and thus we're opening the floodgates to new knobs for configuring the <code>nginx</code> config built for apps.</p> <p>The following new properties can now be set on a per-app basis:</p> <ul> <li><code>x-forwarded-for-value</code></li> <li><code>x-forwarded-port-value</code></li> <li><code>x-forwarded-proto-value</code></li> <li><code>client-max-body-size</code></li> </ul> <p>While the <code>hsts</code> property can now be set globally (default on) in addition to on a per-app basis.</p> <p>We'll continue adding support to additional properties (both globally and otherwise) as the needs arise from the community. Checkout our nginx documentation for further details.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#scheduled-cron-task-management","title":"Scheduled Cron Task Management","text":"<p>For years, we've asked folks to manage a custom cron file outside of the Dokku deployment process. While this was all well and good, it doesn't work well for less technical users or those who do not have server access. We've added support to the <code>app.json</code> file for specifying a list of commands and the schedule for which to run said commands. Usage is simple:</p> <pre><code>{\n\"cron\": [\n{\n\"command\": \"node run some-command-here\",\n\"schedule\": \"@daily\"\n}\n]\n}\n</code></pre> <p>Scheduled cron tasks are run within isolated Docker containers, and any number of commands can be added to a given app. While this isn't currently supported in alternative schedulers, the functionality was built with such support in mind.</p> <p>Checkout the scheduled cron task documentation for more details on how the functionality works. We'd definitely love your feedback!</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#git-repository-syncing-support","title":"Git Repository Syncing support","text":"<p>This is one of the more exciting features. Users may now run a command to specify a remote repository to sync - and build! - an app from via the <code>git:sync</code> command. This makes it possible to build webhook-like functionality by wrapping the command in a web api of sorts.</p> <pre><code># just sync some code, maybe to setup a repository\ndokku git:sync node-js-app https://github.com/heroku/node-js-getting-started.git\n\n# sync and build the repository!\ndokku git:sync --build node-js-app https://github.com/heroku/node-js-getting-started.git\n</code></pre> <p>We hope to continue adding interesting git-based workflows in upcoming releases, but hope that this feature is well-used by platform developers.</p> <p>Thanks to @crisward for the inspiration via his dokku-clone project.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.0/#10","title":"1.0?","text":"<p>Our versioning is getting long in the tooth, and we're quickly winding towards an eventual 1.0 release. It's been teased in the past, but as of this writing, there are currently 18 outstanding issues in the 1.0 milestone. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/","title":"Dokku 0.23.x Wrapup","text":"<p>Dokku version 0.24.0 was released earlier this week. This post covers the major changes that occurred throughout the lifetime of the 0.23.x series. A future post will cover the 0.24.0 release.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#additions","title":"Additions","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#release-changes","title":"Release changes","text":"<p>Dokku now has support for triggering releases via Github Actions. This will allow any maintainer to make a release of Dokku without needing to set anything up locally. The ability to auto-release plugins and tools in the Dokku ecosystem will slowly be added to all core projects over the coming weeks.</p> <p>In addition, we now update the official Azure ARM template for Dokku during the release process, as well as bump the homebrew repo for the remote cli tool. We hope to extend this official release bumping to other image maintained for Dokku in the near future.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#report-output-as-json","title":"Report output as json","text":"<p>While undocumented, all of the golang plugins now support displaying report output as json (#4369). This makes it easier for tools to parse the reports.</p> <p>A future release will hopefully extend this to all plugins, and provide a framework for non-core plugins to also have json formatting support in <code>:report</code> output.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#modifying-x-forwarded-ssl-in-nginx-configurations","title":"Modifying <code>X-Forwarded-Ssl</code> in nginx configurations","text":"<p>Some load balancers require specifying a value for <code>X-Forwarded-Ssl</code>. The ability to do so was added in #4420. Note that this is a non-standard version of setting <code>x-forwarded-proto</code> to <code>https</code>, and should only be done as a last resort.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#add-support-for-injected-cron-entries-from-external-plugins","title":"Add support for injected cron entries from external plugins","text":"<p>One of the things lost by the addition of scheduled cron task support in 0.23.0 was the ability to set cron tasks from plugins. This functionality was used by the dokku-letsencrypt plugin to support it's auto-renew functionality.</p> <p>The change in #4384 allows alternative plugins - such as dokku-letsencrypt - to inject scheduled cron tasks into the cron system used by Dokku. Cron systems can choose to include or not include a cron task based on the specified scheduler, and can also optionally use a third parameter to store arbitrary information.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#ability-to-clear-an-individual-resource-value","title":"Ability to clear an individual resource value","text":"<p>As of (#4372)[https://github.com/dokku/dokku/pull/4372], a resource value can be individually cleared by setting the value to the special value <code>clear</code>.</p> <pre><code>dokku resource:limit --cpu clear node-js-app\n</code></pre> <pre><code>=====&gt; Setting resource limits for node-js-app\n       cpu: cleared\n</code></pre>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#a-new-null-buildpack-was-added","title":"A new 'null' buildpack was added","text":"<p>Herokuish 0.5.25 introduces a new <code>null</code> buildpack. This buildpack does nothing, which is useful if your app vendors all it's dependencies and does not need to be built.</p> <p>To use it, include a <code>.null</code> file in your app repository. No other changes are necessary.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#changes","title":"Changes","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#documentation-is-now-at-dokkucom","title":"Documentation is now at dokku.com","text":"<p>The documentation has moved from the global viewdocs to it's own fork, hosted at dokku.com. Future documentation changes will enable embedded docs for official plugins, doc search, as well as including the blog on the main domain.</p> <p>As an added bonus, our documentation now has SSL!</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#checking-if-an-app-was-deployed","title":"Checking if an app was deployed","text":"<p>Previously, checking if an app was deployed actually checked if there were any running processes. This is not only incorrect, but also fails to take into account applications that do not have running processes and are only used for one-off commands.</p> <p>The fix in #4402 migrates apps to the new \"deployed\" property which is set in core-post-deploy. The result is a slightly faster \"deployed\" check that is correct and allows non-scaled apps to actually work.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#better-procfile-extraction","title":"Better Procfile extraction","text":"<p>As of #4373, the Procfile is now extracted in the pre-deploy step for every deploy and otherwise not removed. Thus, it should always exist when necessary - web will be scale to 1 automatically and it won't need to be present on future ps:scale calls since we'll have the scale file - and the command can execute faster.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.23.x-wrapup/#its-a-wrap","title":"It's a wrap","text":"<p>And that's it for 0.23.x. Our next post will cover 0.24.0, as well as plans for future releases.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/","title":"Dokku Release 0.24.0","text":"<p>Dokku version 0.24.0 was released earlier this week with a few new features that some power users may find useful. We'll go over major changes below.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#changes","title":"Changes","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#change-exit-code-when-app-does-not-exist","title":"Change exit code when app does not exist","text":"<p>This will allow wrappers around dokku to avoid needing two calls to dokku - one for apps:exists, the other for the command you want to run itself - to see if the app does not exist or if the error was something else.</p> <p>Builders of UI systems on top of Dokku may wish to take advantage of this functionality to decrease the number of calls they need to make to Dokku.</p> <p>Finally, plugin developers should always use <code>verify_app_name()</code> (shell) and <code>common.VerifyAppName()</code> (go) when verifying the app name to ensure they also receive this same functionality.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#new-features","title":"New Features","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#support-for-herokus-postdeploy-deployment-task","title":"Support for heroku's <code>postdeploy</code> deployment task","text":"<p>Our existing deployment task support covered a wide range of use cases, but of course did not implement Heroku's own <code>postdeploy</code> support. This deployment task is commonly used to seed data into apps, especially for Heroku's \"review app\" functionality.</p> <p>As of 0.24.0, Dokku implements support for Heroku's <code>postdeploy</code> hook. This is currently triggered during the <code>postdeploy</code> on the first deploy of an app, mimicking heroku. It currently happens after the <code>release</code> task, during the <code>pre-deploy</code> trigger, which more or less mimics the <code>release</code> phase.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#git-authentication-handling-via-netrc","title":"Git Authentication handling via .netrc","text":"<p>With the new <code>git:sync</code> functionality introduced in <code>0.23.0</code>, users of private repositories immediately saw an issue with their ability to use the feature. To enable those users to deploy private apps, the <code>netrc</code> binary was built, and a wrapper <code>git:auth</code> command was added to Dokku.</p> <p>This new command allows users to specify custom git server authentication information for use with <code>git:sync</code> by modifying the <code>~dokku/.netrc</code> file. The alternative is to use ssh keys, which is still supported.</p> <p>This PR additionally outputs an error message when we detect an auth error:</p> <pre><code>There is no deploy key associated with the dokku user.\nGenerate an ssh key with the following command (do not specify a password):\n  ssh-keygen -t ed25519 -C 'example@example.com'\nAs an alternative, configure the netrc authentication via the git:auth command\n</code></pre> <p>This should allow folks to figure out what they need to do.</p> <p>Lastly, the clone/fetch commands no longer use <code>-qq</code> or stderr redirection. If there are other errors, this will allow operators to have some debugging information.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#simplified-docker-image-deployment-via-gitfrom-image","title":"Simplified docker image deployment via <code>git:from-image</code>","text":"<p>There are a ton of people that want to deploy a docker image. To do that, they currently need to:</p> <ul> <li>pull the image via <code>docker pull</code></li> <li><code>tags:deploy</code> it</li> <li>avoid <code>ps:rebuild</code>, which ignores <code>tags:deploy</code></li> <li>avoid git repositories, which will result in breaking <code>tags:deploy</code></li> </ul> <p>The above doesn't quite work without root server access, so anyone who only exposes the dokku user cannot use the above workflow without an extra plugin.</p> <p>They can also do a git repository workflow - creating a repository, updating it with the built image, pushing it - but there are more than a few steps needed to do that correctly and keep history.</p> <p>Pull Request #4450 implements <code>git:from-image</code>. Under the hood, this command creates or updates the git repository for the app with the specified image. The workflow implements all the above steps for users in a way that allows ignoring direct exposure of <code>docker pull</code> as a Dokku command (which would open the flood gates to all docker commands). It also keeps the git workflow (so you get history) and enables a whole class of users to properly deploy docker images.</p> <p>There is other stuff this might enable, like an app library, but the main idea is to enable a class of users that has been typically under-served.</p> <p>For <code>tags</code> plugin users, note that this functionality deprecates the <code>tags</code> plugin, which will be removed in the next minor release. Please migrate any workflows currently using the <code>tags</code> plugin to <code>git:from-image</code>.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#simplified-archive-deployment-via-gitfrom-archive","title":"Simplified archive deployment via <code>git:from-archive</code>","text":"<p>Similar to <code>git:from-image</code> - and using the same internal infrastructure to manage history - there is a new <code>git:from-archive</code> command. This new command supports deploying <code>.tar</code>, <code>.tar.gz</code>, and <code>.zip</code> files to apps, keeping git history with every deploy. In addition to a url, it also supports piping the archive in via stdin.</p> <p>The <code>git:from-archive</code> command is meant to be used in cases where the deployment model is to deploy from a git tag. This may mean that the artifact is already built and just needs extraction, or can continue to use the normal build process available in Dokku.</p> <p>For <code>tar</code> plugin users, note that this functionality deprecates the <code>tar</code> plugin, which will be removed in the next minor release. Please migrate any workflows currently using the <code>tar</code> plugin to <code>git:from-image</code>.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#specifying-app-builders","title":"Specifying app builders","text":"<p>Dokku currently supports three different types of app builders:</p> <ul> <li>Dockerfile</li> <li>Herokuish (for Buildpack Heroku v2a compatibility)</li> <li>Pack (for Cloud Native Buildpacks compatibility)</li> </ul> <p>The specification of the app builder is somewhat hard-coded and actually annoying for users that wish to use a specific builder for their app. In addition, it was impossible to inject your own custom builder, frustrating folks that have very specific constraints about how they generate Docker images.</p> <p>Rather than hardcode the various builders, this new feature allows builder plugins to specify a <code>builder-detect</code> trigger. This trigger can be used to specify if the builder should or should not be used for an application. Each builder takes the app directory and can decide if it should emit it's own image source type.</p> <p>If the final list of detected builders is empty, then Dokku will default to herokuish (and <code>pack/CNB</code> once that is stable). Users may also override the builder via the <code>builder:set</code> command.</p> <p>This change enables users to build custom builder plugins and have those plugins used for building an image asset. By way of example, an enterprising user could create a <code>builder-lambda</code> based on lambci, and then pair this with a scheduler plugin that updates a lambda function on AWS. Alternatively, a user might decide they wish to place their Dockerfile in a specific directory for their applications - such as an <code>_infrastructure</code> directory - and create a plugin to override how that is detected within Dokku.</p> <p>An enterprising user has already built a <code>builder-nix</code> plugin that builds Docker images via NixOS.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#parallelism-for-some-proxy-commands","title":"Parallelism for some proxy commands","text":"<p>Being able to specify <code>--all</code> and increase parallelism of save commands is always great. As of 0.24.0, the commands <code>proxy:enable</code>, <code>proxy:disable</code> and <code>proxy:build-config</code> now support the <code>--all</code> flag in addition to general parallelism.</p> <p>If parallelism is needed for a specific command, please file an issue to get it added :)</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.24.0/#the-next-minor-release","title":"The Next Minor Release","text":"<p>Our next release will continue on the 16 outstanding 1.0 issues. We hope to knock out a few of these, especially those related to Dockerfile and ports handling. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/","title":"Dokku Release 0.25.0","text":"<p>With the 0.25.x release of Dokku a few weeks ago, a folks may have questions as to why they would want to upgrade and how it would impact their workflows. We've cherry-picked a few more important changes, but feel free to go through the release notes for more information.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#changes","title":"Changes","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#make-heroku-20focal-the-default-stack-for-herokuish-builds","title":"Make heroku-20/focal the default stack for herokuish builds","text":"<p>With the release of newer versions of Ubuntu, the heroku-18 stack (based on Ubuntu 18.04) was getting a bit long in the tooth. We've since switched to <code>heroku-20</code> as our default. Many apps will continue to work as before, though some with compiled dependencies may have issues. This may be fixed by either of the following:</p> <ul> <li>Clearing build cache, which will force a rebuild: <code>dokku repo:purge-cache $APP</code></li> <li>Setting the stack to <code>heroku-18</code>: <code>dokku buildpacks:set-property $APP stack gliderlabs/herokuish:latest-18</code></li> </ul> <p>Users may also set the <code>stack</code> property globally by specifying <code>--global</code> instead of an app name.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#drop-web-installer-in-favor-of-setup-via-cli","title":"Drop web installer in favor of setup via cli","text":"<p>Dokku has had a Web installer for years. This installer has been useful for getting started - especially when setup via a cloud image on popular hosting providers - but has been an open security risk for those that forget that it exists.</p> <p>Rather than try weird schemes to lock it down or notify users that it is still around, we've decided to remove it completely. It's usage is replaced by the following commands:</p> <pre><code># usually your key is already available under the current user's `~/.ssh/authorized_keys` file\ncat ~/.ssh/authorized_keys | dokku ssh-keys:add admin\n\n# you can use any domain you already have access to, also takes an IP address\ndokku domains:set-global dokku.me\n</code></pre> <p>We strive to make Dokku secure by default, and this is a step in that direction.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#drop-support-for-ubuntu-1604","title":"Drop support for Ubuntu 16.04","text":"<p>While our debian packages are generic enough to use on any Debian-based operating system, we've dropped support for Ubuntu 16.04 as it reached the public End of Life in April of 2021. This allows us to spend more time testing on newer systems. We've also added initial support for Debian Bullseye (in 0.25.2) for those using Debian's latest release.</p> <p>We will continue to add support for other operating systems as time goes on.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#new-features","title":"New Features","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#add-support-for-the-formation-key-in-appjson","title":"Add support for the formation key in <code>app.json</code>","text":"<p>Dokku has long had support for a <code>DOKKU_SCALE</code> file that tracked repo-specified scaling settings for apps. This was also the name for a file on disk that held the scale contents. Code handling whether a user could scale or not was quite brittle.</p> <p>Users may now specify a <code>formation</code> key in their <code>app.json</code> file. This is similar to heroku, and currently supports scale <code>quantity</code> on a per-process basis.</p> <pre><code>{\n\"formation\": {\n\"web\": {\n\"quantity\": 1\n},\n\"worker\": {\n\"quantity\": 4\n}\n}\n}\n</code></pre> <p>The goal here is to consolidate various app config stored in a variety of files in repo into one <code>app.json</code> file. We'll be following Heroku's specification around this file where possible, but will extend it where necessary - as we did with Cron support in 0.23.x.</p> <p>See the process management documentation for more information on how to use this in your apps.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#add-monorepo-support","title":"Add monorepo support","text":"<p>Some users may find a need to deploy an app several times with slightly different settings each time. This generally works by setting environment variables as necessary, but some things require changing which in-repo files are used. We've made changes across Dokku to respect changing the following:</p> <ul> <li><code>appjson-path</code>:<ul> <li>description: Controls what the path is to the <code>app.json</code> file</li> <li>command: <code>dokku app-json:set $APP appjson-path</code></li> </ul> </li> <li><code>build-dir</code>:<ul> <li>description: Controls the root app directory for builds</li> <li>command: <code>dokku builder:set $APP build-dir</code></li> </ul> </li> <li><code>projecttoml-path</code>:<ul> <li>description: Controls the <code>project.toml</code> path used for Cloud Native Buildpack builds</li> <li>command: <code>dokku builder-pack:set $APP projecttoml-path</code></li> </ul> </li> <li><code>dockerfile-path</code>:<ul> <li>description: Controls the <code>Dockerfile</code> path for dockerfile-based builds</li> <li>command: <code>dokku builder-dockerfile:set $APP dockerfile-path</code></li> </ul> </li> <li><code>procfile-path</code>:<ul> <li>description: Controls the path to the <code>Procfile</code></li> <li>command: <code>dokku ps:set $APP procfile-path</code></li> </ul> </li> </ul> <p>Feel free to file issues for any other files in use by Dokku that should be changed to allow better monorepo support.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#implement-the-registry-plugin","title":"Implement the <code>registry</code> plugin","text":"<p>Users of the new <code>git:from-image</code> functionality introduced in 0.24 may have noticed missing support for authenticating against remote registries. This was added in the new registry management plugin, and generally supports the same interface you'd see with <code>docker login</code>:</p> <pre><code># hub.docker.com\ndokku registry:login docker.io $USERNAME $PASSWORD\n# password via stdin\necho \"$PASSWORD\" | dokku registry:login --password-stdin docker.io $USERNAME\n</code></pre> <p>Additionally, schedulers other than the <code>docker-local</code> scheduler require that the deployed image be available on a registry. This plugin can be used for upload images after the build process completes.</p> <pre><code>dokku registry:set node-js-app push-on-release true\n</code></pre> <p>Images will be pushed to Docker Hub by default. Users may specify an alternative registry by setting the <code>server</code> property:</p> <pre><code>dokku registry:set node-js-app server registry.digitalocean.com/\n</code></pre> <p>Users of the community dokku-registry plugin should uninstall that plugin before upgrading Dokku, and then ensure that their apps are re-configured with the built-in plugin.</p> <p>See the registry management documentation for more information on how to use the registry plugin.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#revamp-the-dokku-run-command","title":"Revamp the <code>dokku run</code> command","text":"<p>The <code>dokku run</code> command was often misunderstood. Users assumed the containers would disappear after use, and there was no way to understand what containers were running via <code>dokku run</code>.</p> <p>The new release automatically includes the <code>--rm</code> flag on containers created by <code>dokku run</code>. Users wishing to run detached containers should use the <code>dokku run:detached</code> command.</p> <p>We also introduced the <code>run:list</code> command, which can be used to list all containers created by <code>dokku run</code> (by filtering on the <code>com.dokku.container-type=run</code> docker label). Users will be able to quickly see what is currently running. In the future, users may be able to enter those running containers via <code>run:enter</code>, and remove any errant ones via <code>run:destroy</code>.</p> <p>Please note that implementation and semantics of <code>dokku run</code> are up to individual scheduler plugins.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#routing-to-non-dokku-managed-apps","title":"Routing to non-Dokku managed apps","text":"<p>In some cases, it may be necessary to route an app to an existing <code>$IP:$PORT</code> combination. This is particularly the case for internal admin tools or services that aren't run by Dokku but have a web ui that would benefit from being exposed by Dokku. This can be done by setting a value for <code>static-web-lister</code> network property and running a few other commands when creating an app.</p> <pre><code># for a service listening on:\n# - ip address: 127.0.0.1\n# - port: 8080\n# create the app\ndokku apps:create local-app\n\n# set the builder to the null builder, which does nothing\ndokku builder:set local-app selected null\n\n# set the scheduler to the null scheduler, which does nothing\n# for dokku 0.25.x\ndokku config:set local-app DOKKU_SCHEDULER=null\n\n# for dokku 0.26+\ndokku scheduler:set local-app selected null\n\n# set the static-web-listener network property to the ip:port combination for your app.\ndokku network:set local-app static-web-listener 127.0.0.1:8080\n\n# set the port map as desired for the port specified in your static-web-listener\ndokku proxy:ports-set local-app http:80:8080\n\n# set the domains desired\ndokku domains:set local-app local-app.dokku.me\n\n# build the proxy config\ndokku proxy:build-config local-app\n</code></pre> <p>The above takes advantage of new <code>null</code> builder and scheduler plugins that do nothing during the build or schedule phases.</p> <p>This functionality can be used when trying to expose non-Dokku maintained services to the external world without requiring a deployed proxy. One nice side-effect is that this also means users can expose services with letsencrypt support.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.25.0/#the-next-minor-release","title":"The Next Minor Release","text":"<p>Our next release will continue on the 14 outstanding 1.0 issues. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/","title":"Dokku Release 0.26.0","text":"<p>It's been a little over two weeks since our 0.26.x release landed. Here is a summary of what features were added during the 0.25.x release and new stuff in 0.26.x.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#new-features-during-the-025x-series","title":"New Features during the 0.25.x Series","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#debian-bullseye-support","title":"Debian Bullseye Support","text":"<p>#4742</p> <p>Dokku has supported both Debian and Ubuntu for quite a while - our packages are universal and actually can be installed all the way back to Ubuntu 14.04, even though we no longer officially support it. Bullseye came in a few days after the 0.25.0 release, so adding support for it made total sense.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#faster-herokuish-builds-when-injecting-environment-variables","title":"Faster Herokuish builds when injecting environment variables","text":"<p>#4741</p> <p>Previously, herokuish buildpack builds would use intermediate containers for injecting the initial environment variables during the build process. This was actually quite slow - a container is created, started, some command is run, and then we create the image from that container - and also sometimes resulted in leftover containers if a build failed.</p> <p>We now initialize app environment variables via a special Dockerfile, which skips the intermediate container completely. Not only is this a bit faster, but we also no longer need to cleanup after the intermediate container.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#vscode-remote-container-support","title":"VSCode Remote Container Support","text":"<p>#4785 #4791 #4800 #4814</p> <p>For anyone doing Dokku development, being able to simulate the entire environment is :major:  for productivity. Setting up a virtual machine can be:</p> <ul> <li>Slow: you are competing for system resource during the build</li> <li>Error Prone: Virtualbox doesn\u2019t work for me, but also the entire build may fail if you are not on a network</li> <li>Impossible: Our development environment isn\u2019t tested at all on Windows, knocking off a ton of potential contributors</li> </ul> <p>We\u2019ve since added more complete support for developing in VSCode\u2019s Remote Container environment. In the future, supporting Azure and GitHub dev containers is in the cards, but this should enable most developers to more smoothly develop, test, and contribute to Dokku.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#schedule-process-types-in-parallel","title":"Schedule Process Types in Parallel","text":"<p>Note</p> <p>This functionality was graciously sponsored by Rechat, a company doing remarkable efforts to help simplify and elevate how Real Estate Agents and Brokers operate. </p> <p>#4829</p> <p>Previously, we would deploy each container process type one at a time. For most users, this was not a huge deal, but users deploying apps with 10+ apps would encounter multi-minute deploys.</p> <p>As of 0.25.5, users can set the parallelism on processed process types. The <code>web</code> process is now always deployed first, while all other processes will deployed after the fact. The following command will set parallelism to 4 (default: 1) for non-web processes:</p> <p><pre><code>dokku scheduler-docker-local:set $APP parallel-schedule-count 4\n</code></pre> This only applies to the list of process types scheduled at once, not individual containers within a process type.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#changes-in-026x","title":"Changes in 0.26.x","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#removal-of-deprecated-tags-and-tar-plugins","title":"Removal of deprecated <code>tags</code> and <code>tar</code> plugins","text":"<p>#4858 #4859</p> <p>These two plugins were previously deprecated in 0.24.x in favor of git:from-image and git:from-archive, respectively. Rather than keep an unmaintained, buggy implementation of deployment, we\u2019ve completely removed these two plugins. Users should switch to the recommended methods of deployment, which are much more flexible and better integrate with Dokku.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#faster-restarts-and-single-process-restarts","title":"Faster restarts and single-process restarts","text":"<p>#4765</p> <p>Previously a restart would result in a complete rebuild of an application. With this change, restarts will now only rebuild when the image does not exist, and otherwise simply restart processes with the built image.</p> <p>In addition, a user may restart just a single process type. While not common, this can be used as a proxy for killing processes that consume memory, while not requiring a full app rebuild or restart.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#increase-parallelism-for-containers-within-specific-process-types","title":"Increase parallelism for containers within specific process types","text":"<p>#4860</p> <p>As a followup to #4829, apps deployed via the docker-local scheduler can now perform parallel scheduling for specific process types. The default configuration follows the existing behavior, while engineers that need extra parallelism on a per-process type basis can configure it via the <code>app.json</code> file:</p> <pre><code>{\n    \u201cformation\u201d: {\n        \u201cweb\u201d: {\n            \u201cmax_parallel\u201d: 3\n        }\n    }\n}\n</code></pre> <p>Parallelism defaults to 1 (previous behavior) but can be increased as needed.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#scheduler-management-plugin","title":"Scheduler Management Plugin","text":"<p>#4857</p> <p>As we move towards a 1.0 release, Dokku\u2019s internal configuration that can be modified via environment variables is being moved into plugin-specific configuration settings. Setting a scheduler is one of them, and 0.26.0 will migrate the <code>DOKKU_SCHEDULER</code> environment variable to a <code>scheduler</code> plugin setting. Going forward, should set the scheduler via <code>scheduler:set [app|\u2014global] selected</code> call.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#raspberry-pi-support","title":"Raspberry PI Support","text":"<p>#4885 #4887 #4888 #4889</p> <p>Dokku has always lived in the realm of self-hosting, but it was always x86-based. This completely precluded ARM users from using Dokku, which wasn\u2019t great for those who fully self-hosted, servers included.</p> <p>In the first few releases of 0.26.x, we\u2019ve added <code>armhf</code> architecture support, allowing those using Raspbian to install Dokku. Adding support for other ARM architectures should be rather trivial in the future (provided there is Golang support).</p> <p>Some notes:</p> <ul> <li>Herokuish builds will never be supported as the heroku Buildpacks only support x86.</li> <li>Cloud Native Buildpack usage <code>pack</code> does not currently support ARM, though we will be helping upstream to get that rolling so developers can use Cloud Native Buildpacks.</li> <li>Dockerfile builds should work if your base image works on ARM. </li> </ul> <p>While there are some limitations, the general Dokku experience works quite well on ARM, and hopefully opens up experimentation to the general development community.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#dokku-pro","title":"Dokku Pro","text":"<p>Dokku Pro is a commercial offering that provides a familiar Web UI for all common tasks performed by developers. End users can expect an interface that provides various complex cli commands in an intuitive, app-centric manner, quickly speeding up tasks that might otherwise be difficult for new and old users to perform. Additionally, it provides a way to perform these tasks remotely via a json api, enabling easier, audited remote management of servers. Finally, Dokku Pro provides an alternative, https-based method for deploying code which can be used in environments that lockdown ssh access to servers.</p> <p>We'll have more information in the coming week, but Dokku Pro will be provided under early bird pricing (with the price going up as we continue to release new versions). Server licenses are sold in perpetuity, so lock in lower pricing today!</p> <p>Purchase Now</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.26.0/#the-next-minor-release","title":"The Next Minor Release","text":"<p>Our next release will continue on the 9 outstanding 1.0 issues. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/","title":"Dokku Release 0.28.0","text":"<p>It's been a little over two weeks since our 0.28.x release landed. Here is a summary of what new stuff is in 0.28.x.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#changes-in-026x","title":"Changes in 0.26.x","text":"","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#removal-of-deprecated-tags-and-tar-plugins","title":"Removal of deprecated <code>tags</code> and <code>tar</code> plugins","text":"<p>#4858 #4859</p> <p>These two plugins were previously deprecated in 0.24.x in favor of git:from-image and git:from-archive, respectively. Rather than keep an unmaintained, buggy implementation of deployment, we\u2019ve completely removed these two plugins. Users should switch to the recommended methods of deployment, which are much more flexible and better integrate with Dokku.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#faster-restarts-and-single-process-restarts","title":"Faster restarts and single-process restarts","text":"<p>#4765</p> <p>Previously a restart would result in a complete rebuild of an application. With this change, restarts will now only rebuild when the image does not exist, and otherwise simply restart processes with the built image.</p> <p>In addition, a user may restart just a single process type. While not common, this can be used as a proxy for killing processes that consume memory, while not requiring a full app rebuild or restart.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#increase-parallelism-for-containers-within-specific-process-types","title":"Increase parallelism for containers within specific process types","text":"<p>#4860</p> <p>As a followup to #4829, apps deployed via the docker-local scheduler can now perform parallel scheduling for specific process types. The default configuration follows the existing behavior, while engineers that need extra parallelism on a per-process type basis can configure it via the <code>app.json</code> file:</p> <pre><code>{\n    \u201cformation\u201d: {\n        \u201cweb\u201d: {\n            \u201cmax_parallel\u201d: 3\n        }\n    }\n}\n</code></pre> <p>Parallelism defaults to 1 (previous behavior) but can be increased as needed.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#scheduler-management-plugin","title":"Scheduler Management Plugin","text":"<p>#4857</p> <p>As we move towards a 1.0 release, Dokku\u2019s internal configuration that can be modified via environment variables is being moved into plugin-specific configuration settings. Setting a scheduler is one of them, and 0.26.0 will migrate the <code>DOKKU_SCHEDULER</code> environment variable to a <code>scheduler</code> plugin setting. Going forward, should set the scheduler via <code>scheduler:set [app|\u2014global] selected</code> call.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#raspberry-pi-support","title":"Raspberry PI Support","text":"<p>#4885 #4887 #4888 #4889</p> <p>Dokku has always lived in the realm of self-hosting, but it was always x86-based. This completely precluded ARM users from using Dokku, which wasn\u2019t great for those who fully self-hosted, servers included.</p> <p>In the first few releases of 0.26.x, we\u2019ve added <code>armhf</code> architecture support, allowing those using Raspbian to install Dokku. Adding support for other ARM architectures should be rather trivial in the future (provided there is Golang support).</p> <p>Some notes:</p> <ul> <li>Herokuish builds will never be supported as the heroku Buildpacks only support x86.</li> <li>Cloud Native Buildpack usage <code>pack</code> does not currently support ARM, though we will be helping upstream to get that rolling so developers can use Cloud Native Buildpacks.</li> <li>Dockerfile builds should work if your base image works on ARM. </li> </ul> <p>While there are some limitations, the general Dokku experience works quite well on ARM, and hopefully opens up experimentation to the general development community.</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#dokku-pro","title":"Dokku Pro","text":"<p>Dokku Pro is a commercial offering that provides a familiar Web UI for all common tasks performed by developers. End users can expect an interface that provides various complex cli commands in an intuitive, app-centric manner, quickly speeding up tasks that might otherwise be difficult for new and old users to perform. Additionally, it provides a way to perform these tasks remotely via a json api, enabling easier, audited remote management of servers. Finally, Dokku Pro provides an alternative, https-based method for deploying code which can be used in environments that lockdown ssh access to servers.</p> <p>We'll have more information in the coming week, but Dokku Pro will be provided under early bird pricing (with the price going up as we continue to release new versions). Server licenses are sold in perpetuity, so lock in lower pricing today!</p> <p>Purchase Now</p>","tags":["dokku","release"]},{"location":"2021/dokku-0.28.0/#the-next-minor-release","title":"The Next Minor Release","text":"<p>Our next release will continue on the 9 outstanding 1.0 issues. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/","title":"Dokku's Roaring 0.20s","text":"<p>It's been a few months since the last release post, so we'll summarize whats been going on in Dokku Land in 2020.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#discussions","title":"Discussions","text":"<p>Where should you get help? We've added Github Discussions support to the main project. Folks are encouraged to post questions and seek help from the community there. This will be a monitored channel, and is subject to the Code of Conduct.</p> <p>If you are seeking more \"live\" support, join the <code>#dokku</code> channel on the Gliderlabs Slack. A member of the core team - in addition to community members! - will attempt to help you given enough time and information.</p> <p>Users can continue posting to Stackoverflow or other locations, though those will not be actively monitored for issues.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#releases","title":"Releases","text":"","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#021x","title":"0.21.x","text":"<p>We released quite a few major things in the 0.21.0 release:</p> <ul> <li>Ubuntu 20.04 support: Our packages generally support all releases of Debian and Ubuntu, though having an official package repository for your OS is always nice.</li> <li>Go Module usage: Glide was great for the time it was created, but as the Golang community has moved on, so should we.</li> <li>Upgrades of herokuish, plugn, procfile-util, sigil, and sshcommand: Dokku occasionally reaches out to single-purpose tooling for certain functionality, and our tight integration means we occasionally need to do things internally to support toolchain upgrades.</li> </ul> <p>Other than the above, 0.21.0 was mostly a bugfix release. Hopefully it was to your liking.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#022x","title":"0.22.x","text":"<p>The 0.22.x was a bit more expansive in the number of changes it introduced. There were a number of changes and deprecations, the most major of which were:</p> <ul> <li>Process type names specified in <code>Procfile</code> files and app names may no longer use characters not valid in DNS Label Names (RFC 1123). This allows us to properly support networking in alternative schedulers - such as Kubernetes and Nomad - as well as internal app networking with the default Docker Local scheduler.</li> <li>The <code>ps</code> plugin had it's <code>*all</code> commands removed in favor of a <code>--all</code> flag. This was actually fairly major, as it changes how parallelism works within Dokku, and makes it easier to support parallel commands against multiple applications. In the future, you'll be seeing more <code>--all</code> flag support in Dokku (as well as <code>--global</code> as necessary).</li> </ul> <p>What else showed up in 0.22.x?</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#cloud-native-buildpacks-support","title":"Cloud Native Buildpacks support","text":"<p>Cloud Native Buildpacks are the future of Dokku's Buildpack support. We previously blogged about it, comparing it to our current Herokuish support. This new initiative is supported by a wide range of folks affiliated with the Cloud Native Computing Foundation, and we're hoping to see tighter integration with Dokku in the future.</p> <p>While it's still in development, this functionality is currently behind an app-specific environment variable and depends on the <code>pack</code> binary. To use it:</p> <pre><code># where $APP is your app name\ndokku config:set $APP DOKKU_CNB_EXPERIMENTAL=1\n# install pack: https://buildpacks.io/docs/tools/pack/\n# apt based installation in use here, but use what you are comfortable with\nsudo add-apt-repository ppa:cncf-buildpacks/pack-cli\nsudo apt-get update\nsudo apt-get install pack-cli\n</code></pre> <p>Some future improvements:</p> <ul> <li><code>buildpacks</code> command support</li> <li>allowing users to specify CNB usage globally</li> <li>builder specification (currently uses <code>heroku/buildpacks</code>)</li> <li>default to CNB</li> </ul> <p>Definitely a space to watch.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#aggressive-container-cleanup","title":"Aggressive Container Cleanup","text":"<p>Previous releases of Dokku would leave behind intermediate containers for debugging purposes. As Dokku has largely stabilized, these containers are no longer as necessary. The intermediate containers are commonly confused for containers that utilize server resources. Even worse, Docker will occasionally start these intermediate containers on reboot (Docker does not keep track of whether a container was manually stopped or not), causing actual performance issues for servers.</p> <p>In 0.22.x, we start deleting these intermediate containers at most 5 minutes after a deploy, and sometimes even sooner. We also cleanup images that may have been used during this process. While the cleanup time is not currently configurable, we hope that this change allows folks to feel better about resource utilization on more constrained servers.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#nginx-configuration-knobs","title":"Nginx Configuration Knobs","text":"<p>While we attempt to ship with the best nginx configuration by default, folks may want to tune specific knobs to match their setup without needing to ship an <code>nginx.conf.sigil</code> that may become outdated. We've added an <code>nginx:set</code> command that can be used to set various nginx settings, and will continue to add more settings over time.</p> <p>Additionally, for installations that have a single <code>nginx.conf.sigil</code> that should be used amongst all apps by default, we've added the ability to set the location of the global defaults via a plugin trigger. This is exceptionally useful for platform creators that must inject some special configuration to integrate with their platform.</p> <p>Finally, if you wish to disable app-side <code>nginx.conf.sigil</code> extraction, we've added a tunable property for this via <code>nginx:set</code> (<code>disable-custom-config</code>). While this cannot currently be set globally or as a default, enterprising platform developers may create plugins that inject properties on app creation...</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#vector-based-log-shipping","title":"Vector-based Log Shipping","text":"<p>This came late in the 0.22.x lifecycle (0.22.6/0.22.7), but was added to address the logging options issue (#2268). Vector is an open-source, lightweight and ultra-fast tool for building observability pipelines. Dokku integrates with it for shipping container logs for the <code>docker-local</code> scheduler. Users may configure log-shipping on a per-app or global basis, neither of which interfere with the <code>dokku logs</code> commands.</p> <p>Vector is based on the idea of <code>inputs</code>, <code>transforms</code> and <code>sinks</code>. Dokku will automatically inject the correct <code>inputs</code> for all Docker containers, and it is up to you to define a <code>sink</code> to which you can send container logs (globally or per-app). Dokku does not currently support customizing transforms, though this may come in a future release.</p> <p>Checkout the Vector Log Shipping docs for more usage information.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#golang-plugin-rewrites","title":"Golang Plugin Rewrites","text":"<p>A few plugins have been rewritten in Golang:</p> <ul> <li>app-json</li> <li>logs</li> <li>ps</li> </ul> <p>Generally speaking, plugins are rewritten when the complexity of writing future features outweighs keeping the plugin implemented in shell code. In particular, any plugins that perform one of the following tasks are good candidates for higher-level languages:</p> <ul> <li>Argument parsing</li> <li>JSON handling (reading and writing)</li> <li>Network requests</li> <li>Interacting with APIs</li> <li>Managing structured data</li> </ul> <p>While all of these have been performed one time or another in bash, the fact is that there are a ton of edge cases that have popped up over the years that make it super difficult to even reason about some of the code, whereas it is fairly easy for me to handle these within Golang (either with the standard library or something off-the-shelf).</p> <p>All that said, not all plugins will be rewritten in Golang - the <code>git</code> plugin is likely to stay as is - and some plugins may see hybrid rewrites as necessary, but this should hopefully give folks a bit of an idea as to why the Dokku codebase is not predominantly written in shell.</p>","tags":["dokku","release"]},{"location":"2021/dokkus-roaring-20s/#future-development","title":"Future Development","text":"<p>0.22.x was a feature-packed release, and we're not slowing down. 0.23.x is around the corner, and will include quite a few interesting features for folks. We'll save those notes for the next blog post :)</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/","title":"Dokku 0.27.x Wrapup","text":"<p>Dokku version 0.27.0 was released a few months ago. This post covers the important changes that occurred throughout the lifetime of the 0.27.x series. A future post will cover the 0.28.0 release.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#additions","title":"Additions","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#os-and-architecture-support","title":"OS and Architecture Support","text":"<p>Ubuntu Focal was added as a release target. We also added support for ARM (32-bit) and ARM64 architectures. Users on Raspberry Pis should be able to install the latest Dokku, regardless of OS or Architecture.</p> <p>Additionally, the Dokku docker image is now based on Focal :)</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#app-and-service-filtering","title":"App and service filtering","text":"<p>It is now possible to filter apps and services via the <code>user-auth-app</code> and <code>user-auth-service</code> triggers. These can be implemented in custom plugins to constrain what a user has access to, and is in use within Dokku Pro for it's team-management system.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#fixes","title":"Fixes","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#app-domain-renames-are-scoped-to-global-domains","title":"App domain renames are scoped to global domains","text":"<p>Previously, if you had an app named <code>test</code> with a domain of <code>tester.com</code> and renamed it to <code>test-2</code>, we would rename the domain to <code>test-2er.com</code>. We've now scoped this so app renames only impact domains associated with any global domains on the server.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#remove-bad-intermediate-containers","title":"Remove bad intermediate containers","text":"<p>Due to how Dokku handles the build process, intermediate containers reuse the internal docker image name for an app. This means that it is sometimes possible to execute <code>dokku run</code> against an intermediate image.</p> <p>Dokku now properly removes intermediate images if the build fails.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#support-for-special-characters-in-docker-container-options","title":"Support for special characters in docker container options","text":"<p>Dokku now supports using special characters, such as parenthesis, in container options. Here is an example:</p> <pre><code>dokku docker-options:add node-js-app deploy '--label \"some.key=Host(\\`node-js-app.dokku.arketyped.net\\`)\"'\n</code></pre> <p>Some characters should be escaped - and quoting matters! - but label-based proxy-implementations can now take full advantage of apps deployed via Dokku.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.27.x-wrapup/#its-a-wrap","title":"It's a wrap","text":"<p>Those were the major changes in 0.27.x. Our next post will cover 0.28.0!</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/","title":"Dokku 0.28.x Wrapup","text":"<p>It's wrapup time! This post covers the important changes that occurred throughout the lifetime of the 0.28.x series.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#removals","title":"Removals","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#no-more-support-for-centos-7-debian-9-fedora-opensuse","title":"No more support for Centos 7, Debian 9, Fedora, OpenSuse","text":"<p>With the maturation of our Docker-based deployment offering, we've removed official support for these other operating systems.</p> <p>Why would we do this? For Centos, Fedora, and OpenSuse, they were simply untested integrations that were half-baked into Dokku over the years. Worse, we only ever built a package for Centos, and never actually guaranteed support for the others.</p> <p>As far as Debian 9 is concerned, the OS reached end-of-life in July of 2022, and it only makes sense to drop support for something unsupported upstream.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#deprecations","title":"Deprecations","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#ubuntu-1804-is-deprecated","title":"Ubuntu 18.04 is deprecated","text":"<p>Ubuntu 18.04 is now a deprecated installation target. The operating system will be considered EOL by Canonical in April 2023. Users are encouraged to upgrade to Ubuntu 22.04 or consider switching their installation method to the Docker-based installation method to avoid any disruption in usage.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#additions","title":"Additions","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#the-automatic-init-process-can-now-be-disabled","title":"The automatic init process can now be disabled","text":"<p>This change allows projects using s6 overlay - in particular linxserver images - the ability to disable --init flag injection. </p> <p>Additionally, force-disable --init flag usage for all linuxserver images. Linuxserver images uses S6, and there are enough of them that this makes sense to autodetect on behalf of users.</p> <p>Users should be able to more easily deploy s6-based images, whether they are official Linuxserver ones or images they've built on their own :)</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#new-proxy-implementations","title":"New Proxy Implementations","text":"<p>As we've grown, the nginx plugin has seen a few warts. Notably, it doesn't tightly integrate with Docker, which sometimes causes requests to either route to the wrong container or fail when the container changes IP address. Additionally, our Letsencrypt integration on top of it is a bit of a hack.</p> <p>As a result, we've decided to create official alternative proxy integrations to our existing nginx plugin. The first two are <code>caddy</code> and <code>traefik</code>, both of which boast healthy development processes and have great integrations with Docker-based deployment environments. In a future release, we also hope to add an official <code>haproxy</code> plugin, and may revisit our <code>nginx</code> integration as well.</p> <p>Please note that none of this means we're dropping support for our existing <code>nginx</code> integration. Users should feel comfortable depending on nginx, switching only as needed.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#an-official-caddy-proxy-implementation","title":"An official caddy proxy implementation","text":"<p>This plugin uses a docker-compose based Caddy installation in conjunction with injected container labels to route requests. It only exposes the minimal necessary for routing traffic to docker containers. Users wishing to customize further labels may explore using the docker-options plugin to attach additional labels during the 'deploy' phase.</p> <p>One big change is that requests are routed as soon as the container is running and passing healthchecks.</p> <p>Checkout the official caddy integration documentation here!</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#an-official-traefik-proxy-implementation","title":"An official traefik proxy implementation","text":"<p>While Caddy is great, some folks may wish to pursue deeper, Traefik-based integration instead. Unlike Caddy, Traefik provides native integration with many schedulers, providing even deeper integration for your routing needs.</p> <p>This plugin uses a docker-compose based Traefik installation in conjunction with injected container labels to route requests. It only exposes the minimal necessary for routing traffic to docker containers. Users wishing to customize further labels may explore using the docker-options plugin to attach additional labels during the 'deploy' phase.</p> <p>Requests are routed as soon as the container is running and passing healthchecks.</p> <p>Checkout the official traefik integration documentation here!</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#a-builder-for-lambda-functions","title":"A builder for lambda functions","text":"<p>Dokku has always been a something of a generic workflow tool. Source code comes in, gets built into an artifact, and then can be scheduled.</p> <p>With 0.28.x, we've introduced a new <code>builder-lambda</code> plugin. This plugin emulates the lambda build process, generating both a runnable docker image and a tarball that is compatible with AWS Lambda. We hope to bring an AWS Lambda-compatible scheduler to Dokku in the near future.</p> <p>Checkout the official builder-lambda documentation here!</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#add-support-for-devcontainers-on-arm64-instances","title":"Add support for devcontainers on ARM64 instances","text":"<p>Lots of developers - including myself! - are moving to M1/M2 MacOS installations, and development of Dokku must continue. The 0.28.x series adds support for using VSCode Devcontainers on ARM64 instances, allowing development to continue unabated.</p> <p>Truthfully, this is somewhat selfish as my main driver had to change - RIP my Intel Mac - but hopefully others contributing to Dokku also benefit :)</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#fixes","title":"Fixes","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#set-corebaretrue-on-correct-repository-path","title":"Set core.bare=true on correct repository path","text":"<p>When deploying a project via <code>git:sync</code>, it was possible to get into a state where your repo was no longer able to have <code>git push</code> executed against it. This change fixes that, so folks can initialize apps via <code>git:sync</code> for the first time and then <code>git push</code> afterwards.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#ignore-https-mappings-when-no-ssl-certificate-exists","title":"Ignore https mappings when no ssl certificate exists","text":"<p>This fixes issues where users may somehow add an https mapping but are missing an ssl certificate, causing nginx to not load properly. We now ignore the mapping and warn users of the misconfiguration.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.28.x-wrapup/#its-a-wrap","title":"It's a wrap","text":"<p>Those were the major changes in 0.28.x. Our next post will cover 0.29.0!</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/","title":"Dokku Release 0.29.0","text":"<p>The last minor release of the year is here! Here is a summary of what is new in 0.29.x.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#changes-in-029x","title":"Changes in 0.29.x","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#file-extraction-moved-from-image-to-repository","title":"File extraction moved from image to repository","text":"<p>Previously, Dokku would build the app image - via whichever builder was specified - and then extract files from the built image. This allowed some level of customization of certain files - such as generating a <code>Procfile</code> or <code>nginx.conf.sigil</code> during the build process based on environment variables. However, the logic is a bit contrary to how we handle other files in mono-repo setups.</p> <p>With 0.29.x, we now extract files from the repository source code where possible. This allows our monorepo codebase handling to act the same everywhere and also speeds up app builds.</p> <p>Note</p> <p>The current notable exception to the new extraction process is the <code>app.json</code> file, which will be fixed in the next minor release.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#app-domains-are-now-setup-at-app-creation-time","title":"App domains are now setup at app creation time","text":"<p>Previously, domains were attached to apps when proxy configuration was first generated. This caused issues when domains were referred to prior to the first app deploy. Dokku will now instead associate app domains on app creation, and users may later remove the domains as desired.</p> <p>One side effect of this is the refactor of how domains and app urls are referred to within Dokku. Please see the migration guide for more details how how this might impact your usage of Dokku.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#new-in-029x","title":"New in 0.29.x","text":"","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#run-subcommand-additions","title":"<code>run</code> subcommand additions","text":"<p>We've added a few new commands to the built-in <code>run</code> plugin:</p> <ul> <li><code>run:logs</code>: Fetches live log output for all one-off <code>run</code> containers. For those that wish to persist logs, checkout Dokku's Vector integration</li> <li><code>run:stop</code>: Stops a one-off <code>run</code> container.</li> </ul> <p>We've also added JSON output support for the <code>run:list</code> command, making it easier to manipulate in a programmatic manner.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#initial-herokuish-support-on-arm-servers","title":"Initial herokuish support on ARM servers","text":"<p>While Dokku has supported ARM/ARM64 servers for a while, Herokuish - the most common builder in use with Dokku - has not. While it is possible to make a buildpack ARM-compatible, the majority are not, and thus we blocked off the functionality to avoid causing issues for users.</p> <p>For more adventurous Dokku users, the herokuish builder can now be enabled on ARM/ARM64 servers (though it is not enabled by default). Individual buildpacks will still need to have support added for ARM/ARM64 platforms, but users are no longer artificially limited by Dokku to other builders.</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#dokku-pro","title":"Dokku Pro","text":"<p>Dokku Pro is a commercial offering that provides a familiar Web UI for all common tasks performed by developers. End users can expect an interface that provides various complex cli commands in an intuitive, app-centric manner, quickly speeding up tasks that might otherwise be difficult for new and old users to perform. Additionally, it provides a way to perform these tasks remotely via a json api, enabling easier, audited remote management of servers. Finally, Dokku Pro provides an alternative, https-based method for deploying code which can be used in environments that lockdown ssh access to servers.</p> <p>Interested in purchasing Dokku Pro? Dokku Pro is currently provided under early bird pricing (with the price going up as we continue to release new versions). Server licenses are sold in perpetuity, so lock in lower pricing today!</p> <p>Purchase Now</p>","tags":["dokku","release"]},{"location":"2022/dokku-0.29.0/#the-next-minor-release","title":"The Next Minor Release","text":"<p>Our next release will continue on the 8 outstanding 1.0 issues. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2022/pro-release-1.1.0/","title":"Pro release 1.1.0","text":"<p>The 1.1.0 release is the first substantive update to Dokku Pro, and it brings with it great changes around usability and functionality.</p> <p>Get your copy today</p> <p>Dokku Pro was released in late 2021 to early bird users willing to deal with a bit of pain in exchange for supporting the project and vision. While it technically worked, there were quite a few places for easy improvement, as well as obvious holes in the existing functionality. Dokku Pro 1.1.0 aims to fill some of those needs, laying the groundwork for future enhancements.</p> <p>Here are a few of the updates included in Dokku Pro 1.1.0.</p>"},{"location":"2022/pro-release-1.1.0/#major-changes","title":"Major Changes","text":""},{"location":"2022/pro-release-1.1.0/#this-lovely-docs-site","title":"This lovely docs site","text":"<p>We've added a more comprehensive documentation site for Dokku Pro. The documentation will continue to improve and will always reference the latest version of Dokku Pro (currently 1.1.0). Enjoy!</p>"},{"location":"2022/pro-release-1.1.0/#requires-dokku-0270","title":"Requires Dokku 0.27.0","text":"<p>The minimum Dokku version increase was made to ensure memory-scaling worked properly. Users of older version of Dokku may still have working installs, though memory scaling will not work correctly for the <code>docker-local</code> scheduler.</p> <p>To update, run:</p> <pre><code># update the ``dokku-update` package first\nsudo apt update\nsudo apt install dokku-update\n\n# update your install (skipping app rebuild)\nsudo dokku-update run --skip-rebuild\n</code></pre>"},{"location":"2022/pro-release-1.1.0/#minimum-required-datastore-plugin-versions","title":"Minimum required datastore plugin versions","text":"<p>As a reminder, it is also recommended to update all datastore plugins to ensure services are properly listed in the API and UI. In addition, the upgrades are necessary for support for deferred app rebuilds during service linking. Without them, service linking may time out.</p> <p>Here are the versions necessary for this release of Dokku Pro:</p> Plugin Version clickhouse 0.13.3 couchdb 1.21.4 elasticsearch 1.20.3 graphite 1.18.2 mariadb 1.19.2 meilisearch 0.2.1 memcached 1.18.4 mongo 1.17.4 mysql 1.19.4 nats 1.19.3 omnisci 1.19.1 postgres 1.19.3 pushpin 0.9.1 rabbitmq 1.19.4 redis 1.19.2 rethinkdb 1.17.2 solr 1.19.4 <p>To update, run:</p> <pre><code># update the ``dokku-update` package first\nsudo apt update\nsudo apt install dokku-update\n\n# update your install (skipping app rebuild)\nsudo dokku-update run --skip-rebuild\n</code></pre>"},{"location":"2022/pro-release-1.1.0/#add-ability-to-link-an-app-to-a-service","title":"Add ability to link an app to a service","text":"<p>Users are now able to link apps to services. This required a ton of changes to how datastores worked in the API, and the resulting refactor makes it much easier to add new datastores to Dokku Pro.</p> <p>To manage service links, go to the <code>Settings</code> section of a given app and use the <code>Linked Services</code> subsection.</p> <p> </p> UI for managing service links"},{"location":"2022/pro-release-1.1.0/#refactor-datastore-and-service-apis-for-easier-expansion","title":"Refactor datastore and service apis for easier expansion","text":"<p>In order to make service linking work, we required a few changes:</p> <ul> <li>exposing a single api for listing all available datastores</li> <li>simplifying how datastores are added/removed</li> <li>fixing certain endpoints that just plain didn't work</li> </ul> <p>Dokku Pro 1.1.0 brings a simplified <code>/datastores</code> and <code>/services</code> api. The former is used to interact with the datastore plugins as a whole - in the future, this may even include setting global datastore plugin properties. The <code>/services</code> endpoint now abstracts all instances of every datastore, bringing a single api endpoint for querying and interacting with all services installed on your Dokku server. This makes it much simpler to support a new datastore - now a 2-line change - versus the previous method of generating various files that still needed work to plug into the api model layer.</p> <p>These APIs are now considered stable for external use. Enjoy!</p>"},{"location":"2022/pro-release-1.1.0/#implement-resource-scaling-ui","title":"Implement resource scaling ui","text":"<p>The initial release of Dokku Pro included process count scaling, but offered nothing for container resources. New in 1.1.0, we added the ability to set memory reservations.</p> <p> </p> Memory scaling <p>For this rough release, we've opted to avoid limits - so that containers can burst on resource utilization - and have omitted CPU - as this is typically bursty on single-instance Dokku installations. We'll be working on the UI in future releases, and hope to include both memory and CPU for limits and reservations in a way that makes sense for our users.</p> <p>See this tweet thread for more details on how... interesting this functionality ended up.</p>"},{"location":"2022/pro-release-1.1.0/#add-swagger-support","title":"Add swagger support","text":"<p>An interactive Swagger UI for Dokku Pro is now available at the <code>/swagger</code> endpoint. Users can also access the OpenAPI 3.0.1 spec at <code>/swagger/openapi.yml</code>.</p> <p> </p> Integrated Swagger UI"},{"location":"2022/pro-release-1.1.0/#add-ability-to-set-the-scheduler-on-a-per-app-basis","title":"Add ability to set the scheduler on a per-app basis","text":"<p>We've added the ability to set an app scheduler on a per-app basis. This automatically picks up the following schedulers (if installed) and displays them for selection:</p> <ul> <li>docker-local</li> <li>kubernetes</li> <li>nomad</li> <li>null</li> </ul> <p> </p> Selection a non-standard scheduler"},{"location":"2022/pro-release-1.1.0/#minor-changes","title":"Minor Changes","text":""},{"location":"2022/pro-release-1.1.0/#allow-customizing-the-network-dokku-pro-listens-on","title":"Allow customizing the network dokku-pro listens on","text":"<p>If you are running Dokku Pro on a local network that doesn't have IPv6 support, you can now set the <code>SERVER_NETWORK</code> configuration variable to <code>tcp4</code> to listen only on IPv4.</p>"},{"location":"2022/pro-release-1.1.0/#set-higher-default-write-timeout-to-allow-for-slow-service-creation-calls-to-complete","title":"Set higher default write timeout to allow for slow service creation calls to complete","text":"<p>The default server read and write timeouts were too low for certain tasks - notably datastore creation and destruction - to complete in time, resulting in UI errors. These are now configurable via <code>SERVER_READ_TIMEOUT</code> and <code>SERVER_WRITE_TIMEOUT</code>, and also have higher default values. Folks on slower servers should see significant improvement in their overall user experience.</p>"},{"location":"2022/pro-release-1.1.0/#add-cli-command-for-outputting-current-dokku-pro-settings","title":"Add cli command for outputting current dokku-pro settings","text":"<p>One annoying issue when debugging an installation is ensuring all the configuration variables are set properly. Users can now run <code>dokku-pro config</code> to show a user-friendly version of the current server config. This can be used to verify that the Dokku Pro license and other configuration options are as you expect.</p>"},{"location":"2022/pro-release-1.1.0/#ui-changes","title":"UI Changes","text":""},{"location":"2022/pro-release-1.1.0/#always-use-correct-icon-size-for-app-status","title":"Always use correct icon size for app status","text":"<p>The app status icon was sometimes too large. While big head mode is cool, its not so much in a UI. We now use the correct image size.</p>"},{"location":"2022/pro-release-1.1.0/#fix-issue-in-ui-when-saving-a-domain-for-an-app","title":"Fix issue in ui when saving a domain for an app","text":"<p>Apps with no domains had issues saving an initial domain without using the CLI. Since one of the goals of Dokku Pro is to supply a web UI, this seems a bit backwards. You can now properly set domains for new apps!</p>"},{"location":"2022/pro-release-1.1.0/#correct-process-type-name-in-the-scaling-ui","title":"Correct process type name in the scaling UI","text":"<p>The process scaling ui showed the app name instead of the process type. This made no sense and was confusing for users with multiple process types.</p>"},{"location":"2022/pro-release-1.1.0/#make-the-envdomains-settings-pages-span-the-entire-page","title":"Make the env/domains settings pages span the entire page","text":"<p>There was a minor change to the environment variable and domain setting pages that made better use of the screen real estate.</p>"},{"location":"2022/pro-release-1.1.0/#api-changes","title":"API Changes","text":""},{"location":"2022/pro-release-1.1.0/#add-meilisearch-datastore-plugin","title":"Add meilisearch datastore plugin","text":"<p>Taking advantage of our new datastore plumbing, we added the Meilisearch plugin to Dokku Pro.</p>"},{"location":"2022/pro-release-1.1.0/#add-better-error-messaging-when-validating-api-entities-from-composite-keys","title":"Add better error messaging when validating api entities from composite keys","text":"<p>When interacting with entities that have composite primary keys - domains, environment variables, formations - users would get somewhat opaque error messages. These have been updated to include more detail.</p>"},{"location":"2022/pro-release-1.1.0/#fix-access-to-service-relationships-in-the-api","title":"Fix access to service relationships in the api","text":"<p>Services now come back as properly associated with apps, making many of the normal json-api relationship endpoints work.</p>"},{"location":"2022/pro-release-1.1.0/#dokku-pro-pricing","title":"Dokku Pro Pricing","text":"<p>Now that there is a new release of Dokku Pro, the early bird pricing will increase. This was previously mentioned in various Dokku Pro announcements, but the price will continue to increase by various amounts until the product settles.</p> <p>Please bear in mind that this is a lifetime license, and users are entitled to all upgrades of Dokku Pro as long as they are made. Folks wishing to support continued development of the project are encouraged to purchase today before the price is increased.</p> <p>Get your copy today</p>"},{"location":"2022/pro-release-1.1.0/#coming-up-next","title":"Coming up next?","text":"<p>The next milestone will continue to have many minor additions, with some effort made on the following additions:</p> <ul> <li>HTTP Auth management</li> <li>Maintenance Mode management</li> <li>Persistent Storage management</li> <li>UI customizations (branding, push urls, hiding apps)</li> <li>Some form of multi-user support</li> </ul> <p>As always, the roadmap is always subject to change, pending time constraints but mostly feature requests by those who have purchased Dokku Pro. Have a feature request or bug complaint? Feel free to file it in the issue tracker here.</p> <p>Thanks everyone for there support during this endeavor, and I hope you all enjoy this release of Dokku Pro!</p>"},{"location":"2022/pro-release-1.2.0/","title":"Pro release 1.2.0","text":"<p>The 1.2.0 release introduces team-based access control and many internal refactors aimed at easing future development of the product.</p> <p>Get your copy today</p> <p>Dokku has traditionally been a single-tenant PaaS solution, where all users had access to all functionality on the server. While there were community plugins that tackled authentication, each implementation had it's rough edges due to interfaces in Dokku itself. Dokku Pro 1.2.0 polishes those edges while introducing a flexible permission system for organizations that need it.</p> <p>Here are a few of the updates included in Dokku Pro 1.2.0.</p>"},{"location":"2022/pro-release-1.2.0/#major-changes","title":"Major Changes","text":""},{"location":"2022/pro-release-1.2.0/#requires-dokku-0278","title":"Requires Dokku 0.27.8+","text":"<p>Warning</p> <p>Dokku Pro 1.2+ will refuse to start if the minimum Dokku version is not installed.</p> <p>The minimum Dokku version increase was made to support new functionality in Dokku Pro. The previous 1.1.0 version required at least 0.27.0, so hopefully this upgrade does not cause too many issues for folks.</p> <p>To update, run:</p> <pre><code># update the ``dokku-update` package first\nsudo apt update\nsudo apt install dokku-update\n\n# update your install (skipping app rebuild)\nsudo dokku-update run --skip-rebuild\n</code></pre>"},{"location":"2022/pro-release-1.2.0/#minimum-required-service-plugin-versions","title":"Minimum required service plugin versions","text":"<p>Warning</p> <p>Dokku Pro 1.2+ will refuse to start if an installed plugin is not at the minimum supported version.</p> <p>As a reminder, it is also recommended to update all service plugins to ensure services are properly listed in the API and UI. In addition, the upgrades are necessary for support for deferred app rebuilds during service linking. Without them, service linking may time out.</p> <p>Certain new functionality in Dokku Pro required changes to the service plugins.</p> <p>Here are the versions necessary for this release of Dokku Pro:</p> Plugin Version clickhouse 0.17.0 couchdb 1.25.0 elasticsearch 1.24.0 graphite 1.22.0 mariadb 1.24.0 meilisearch 0.6.0 memcached 1.22.0 mongo 1.21.0 mysql 1.23.0 nats 1.24.0 omnisci 1.23.0 postgres 1.24.0 pushpin 0.14.0 rabbitmq 1.24.0 redis 1.24.0 rethinkdb 1.21.0 solr 1.24.0 typesense 1.5.0 <p>To update, run:</p> <pre><code># update the ``dokku-update` package first\nsudo apt update\nsudo apt install dokku-update\n\n# update your install (skipping app rebuild)\nsudo dokku-update run --skip-rebuild\n</code></pre>"},{"location":"2022/pro-release-1.2.0/#new-apis-for-community-plugins","title":"New APIs for community plugins","text":"<p>Two plugins were added to Dokku Pro's HTTP API. API Support for Dokku features generally comes first, while later releases will include changes to the Web UI to include these additions.</p>"},{"location":"2022/pro-release-1.2.0/#api-support-for-the-community-http-auth-plugin","title":"API support for the community HTTP Auth Plugin","text":"<p>Authentication comes in many forms, and while most apps have this built-in, simpler, pre-packaged applications may not. Dokku Pro introduces support for the community http-auth plugin, with full API support for managing both user-based and IP-based access controls. This comes with documentation in our included Swagger UI.</p> <p>A future release of Dokku Pro will include a section in the UI for managing network components for apps, including HTTP Auth support.</p>"},{"location":"2022/pro-release-1.2.0/#api-support-for-the-community-http-auth-plugin_1","title":"API support for the community HTTP Auth Plugin","text":"<p>In addition to authentication requirements, it may be necessary to enable or disable all access to your application. The community maintenance plugin provides the ability to do just that.</p> <p>In this release, we've added the ability to enable or disable maintenance mode via API, fully-documented within our included Swagger UI. A future release of Dokku Pro will include a section in the UI for managing network components for apps, including setting apps in maintenance mode.</p>"},{"location":"2022/pro-release-1.2.0/#add-ability-to-set-the-builder-on-a-per-app-basis","title":"Add ability to set the builder on a per-app basis","text":"<p>We've added the ability to set an app builder on a per-app basis. This automatically picks up the following builders (if installed) and displays them for selection:</p> <ul> <li>dockerfile</li> <li>docker-compose</li> <li>herokuish</li> <li>lambda</li> <li>nix</li> <li>null</li> <li>pack</li> </ul> <p> </p> Selection a non-standard builder <p>It is also possible to set a custom build directory in the same UI.</p> <p> </p> Selection a non-standard builder <p>Both of these include API access, documented in our included Swagger UI.</p>"},{"location":"2022/pro-release-1.2.0/#team-management","title":"Team Management","text":"<p>Access control is a complex topic, and one Dokku has traditionally shied away from. Dokku does not have a traditional user model, and it associates a simple name to each ssh-key that a user uses to interact with the CLI over SSH. Until recently, the only way to limit access was by installing the community <code>dokku-acl</code> plugin and hoping it's rigid model for checking permissions aligned with how you wanted to expose server access.</p> <p>With Dokku Pro 1.2.0, there is now a flexible team-based model for access control. System administrators can continue to access everything, but may create teams with permissions against particular apps, services, and commands. Owners - such as team leads or project managers - can be assigned to teams, delegating access control for those teams to the folks closest to what those teams represent. And finally, team members can perform the commands allowed by their team permissions against the apps and services those teams control, and nothing more.</p> <p>The development of this feature required changes across the Dokku ecosystem. New triggers were exposed in both service plugins as well as Dokku itself to manage filtering of apps and services, while some plugins had to be updated in order to respect the updated command system. Dokku Pro itself had several changes to the permissioning system as it was designed and tested in real world settings. While the initial intent was to release Dokku Pro much more often, the work behind team management hopefully makes the wait worth it.</p> <p>The initial release of team management is available via CLI commands. This decision was made in order to release Dokku Pro sooner. A future release of Dokku Pro will include API support for team management as well as Web UI integration for managing teams.</p> <p>Checkout the team management documentation for more information on how team-based access control works.</p>"},{"location":"2022/pro-release-1.2.0/#minor-changes","title":"Minor Changes","text":"<p>Some of the more minor changes were made to make development of Dokku Pro itself much more pleasant. Rather than having a \"miscellaneous bug fixes and improvements\" section as you'd see in many other public product release notes, we'll outline them below.</p>"},{"location":"2022/pro-release-1.2.0/#updated-dependencies","title":"Updated Dependencies","text":"<p>Dokku Pro uses a ton of code itself. We've started the efforts to get the server-side code up to date in an automatic fashion, and are ramping up efforts to modernize the Web UI as well.</p>"},{"location":"2022/pro-release-1.2.0/#filtering-apps-in-dokku-pro","title":"Filtering apps in Dokku Pro","text":"<p>For some use-cases, it may be necessary to hide some apps from the Web UI and API. In the case of Dokku's own installation of Dokku Pro, there are some testing apps that have no value other than being placeholders for requests, and thus are noise in the UI.</p> <p>It is now possible to filter such apps from being accessible via Dokku Pro's interface (they will still be available via CLI using normal <code>dokku</code> commands). An <code>APPS_FILTER</code> environment variable can be set in the Dokku config with a comma-delimited list of apps to hide. These apps will be hidden from API responses and the Web UI as a result.</p> <p>Checkout the configuration documentation for more information on this new setting.</p>"},{"location":"2022/pro-release-1.2.0/#ability-to-override-the-default-root-username","title":"Ability to override the default root username","text":"<p>While the password for authentication is configurable, the <code>root</code> username was not. An <code>ROOT_USERNAME</code> can be set in the Dokku config to override the default <code>root</code> username. You can now login as the <code>lollipop</code> user if desired.</p> <p>Checkout the configuration documentation for more information on this new setting.</p>"},{"location":"2022/pro-release-1.2.0/#typesense-service-support","title":"Typesense service support","text":"<p>Support for the new typesense plugin has been added to services in Dokku. Users can expect the same functionality they would from other services in Dokku, including complete support in our API, Swagger UI documentation, and exposure in the Web UI.</p> <p>New services will be added to future Dokku Pro releases as they are made available.</p>"},{"location":"2022/pro-release-1.2.0/#version-checking-for-server-commands","title":"Version checking for server commands","text":"<p>As mentioned above, we now check for specific versions of Dokku and installed plugins on start of the Dokku Pro server. Users wishing to use supported plugins that do not have at least the minimum version specified will have Dokku Pro fail to boot with an error message detailing the problem.</p> <p>Please be sure to keep up to date with the latest and greatest versions of Dokku and any plugins you use.</p> <p>To update, run:</p> <pre><code># update the ``dokku-update` package first\nsudo apt update\nsudo apt install dokku-update\n\n# update your install (skipping app rebuild)\nsudo dokku-update run --skip-rebuild\n</code></pre>"},{"location":"2022/pro-release-1.2.0/#enhanced-output-for-the-config-command","title":"Enhanced output for the config command","text":"<p>When running the <code>dokku-pro config</code> command, we previously hardcoded how certain config was output. This has been refactored in such a way that we no longer need to update the config command when adding new configuration properties.</p>"},{"location":"2022/pro-release-1.2.0/#fix-log-formatting","title":"Fix log formatting","text":"<p>Log output was a bit broken for the help and version commands, and elsewhere. Dokku Pro now will only log in JSON format when there is no TTY - for example, when running under <code>systemd</code> - and will have human-readable output otherwise</p> <p>Additionally, we now use a single logging mechanism across the codebase, ensuring most - if not all - logs are in the proper format, regardless of where the log call is created.</p>"},{"location":"2022/pro-release-1.2.0/#ignoring-compiled-assets-during-project-search","title":"Ignoring compiled assets during project search","text":"<p>This was actually a fairly painful issue, workflow-wise. Searching for instances of code during refactoring was made painful due to including compiled assets, binary files, and external dependencies. These are now ignored so the editor does not lock up when searching for a random bit of javascript :)</p>"},{"location":"2022/pro-release-1.2.0/#standardized-code-initialization","title":"Standardized code initialization","text":"<p>Previously, Dokku Pro would set up certain checks and load config on-the-fly. This led to race conditions in certain cases, and was messier to understand. All initialization code has now been placed in a central location that is easy to understand when first diving into the code.</p>"},{"location":"2022/pro-release-1.2.0/#dokku-pro-pricing","title":"Dokku Pro Pricing","text":"<p>With a new release comes a price increase. Although it was mentioned in the 1.1.0 release post, we previously avoided a price increase to give folks more time to consider supporting Dokku Pro development at a lower price point. With the new functionality, we believe it is time to start the increases. Dokku Pro's price will continue to increase over time by various amounts until the product settles to a more \"feature-complete\" state.</p> <p>Please bear in mind that this is a lifetime license, and users are entitled to all upgrades of Dokku Pro as long as they are made. Folks wishing to support continued development of the project are encouraged to purchase today before the price is increased.</p> <p>Get your copy today</p>"},{"location":"2022/pro-release-1.2.0/#coming-up-next","title":"Coming up next?","text":"<p>Here is what we'll be working towards over the next few releases</p> <ul> <li>API and Web UI support for team management</li> <li>Improvements to service UI interactions</li> <li>Exposing HTTP Auth and Maintenance mode in the Web UI</li> <li>Alternative forms of authentication</li> <li>More APIs for core Dokku functionality!</li> <li>Persistent Storage management</li> </ul> <p>As always, the roadmap is always subject to change, pending time constraints but mostly feature requests by those who have purchased Dokku Pro. Have a feature request or bug complaint? Feel free to file it in the issue tracker here.</p> <p>Thanks everyone for there support during this endeavor, and I hope you all enjoy this release of Dokku Pro!</p>"},{"location":"2023/dokku-0.30.0/","title":"Dokku Release 0.30.0","text":"<p>The first minor release of the year is here! Here is a summary of what is new in 0.30.x.</p> <p>Tip</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#removals-in-030x","title":"Removals in 0.30.x","text":"<p>The following functionality has long been deprecated and is now removed:</p> <ul> <li>The <code>logs:failed</code> command now requires specifying an app (or the <code>--all</code> flag).</li> <li>Builder-specific post-release hooks are removed in favor of <code>post-release-builder</code>, which takes the builder as an argument.</li> <li>The global <code>--detached</code> flag used for <code>dokku run</code> is now supersceded by <code>dokku run:detached</code>.</li> <li>Support for the <code>DOKKU_SCALE</code> file is removed. Users should migrate immediately to <code>app.json</code>.<ul> <li>Anyone upgrading from very old Dokku versions or using the <code>DOKKU_SCALE</code> command to specify scale will see issues. Please upgrade to Dokku <code>0.29.x</code> and rebuild your apps once prior to upgrading to Dokku <code>0.30.x</code>.</li> </ul> </li> <li>SPDY support has been removed in favor of http2.<ul> <li>Anyone using a custom template should remove references to SPDY or a future release will fail to build.</li> </ul> </li> </ul> <p>We also removed a ton of deprecated commands and functions across dokku in #5659.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#changes-in-030x","title":"Changes in 0.30.x","text":"","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#eol-of-ubuntu-1804-support","title":"EOL of Ubuntu 18.04 support","text":"<p>With upstream dropping LTS support, Ubuntu 18.04 support in Dokku is EOL. Users are heavily encouraged to upgrade their operating systems to Ubuntu 20.04 or Ubuntu 22.04, either via an upgrade or fresh install. The next release of Dokku will stop releasing for Ubuntu 18.04 and packages will be removed in the future.</p> <p>Please note that while our existing packages may continue to run on Ubuntu 18.04, issues for those running on 18.04 may be summarily closed.</p> <p>Finally, Herokuish will also shortly drop Ubuntu 18.04 releases. Users are heavily encouraged to upgrade their apps to newer stacks, as those apps may fail to build for a variety of reasons.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#appjson-extraction-moved-from-image-to-repository","title":"app.json extraction moved from image to repository","text":"<p>In 0.29.x, we moved file extraction for various supporting files from the built image to the app source. This change now also applies to <code>app.json</code>. This was done in order to standardize how mono-repo codebases were built.</p> <p>With 0.30.x, we now extract <code>app.json</code> from the repository source code where possible. This allows our monorepo codebase handling to act the same everywhere and also speeds up app builds.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#new-in-030x","title":"New in 0.30.x","text":"","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#an-official-haproxy-proxy-implementation","title":"An official haproxy proxy implementation","text":"<p>This plugin uses a docker-compose based Haproxy installation in conjunction with injected container labels to route requests. It only exposes the minimal necessary for routing traffic to docker containers. Users wishing to customize further labels may explore using the docker-options plugin to attach additional labels during the 'deploy' phase.</p> <p>Big thanks to @byjg for their work on EasyHAProxy</p> <p>Checkout the official haproxy integration documentation here!</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#simplified-image-deployment-via-gitload-image","title":"Simplified image deployment via <code>git:load-image</code>","text":"<p>Similar to <code>git:load-image</code> - and using the same internal infrastructure to manage history - there is a new <code>git:load-image</code> command. This new command supports deploying the output of <code>docker image save $IMAGE_NAME</code> on stdin, keeping git history with every deploy.</p> <p>The <code>git:load-image</code> command is meant to be used in cases where the deployment model is to deploy from a built docker image in CI. This is useful when users do not have an intermediate docker registry available from which they can deploy.</p> <p>See the git documentation for further details.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#interacting-with-multiple-dokku-remotes-via-the-official-client","title":"Interacting with multiple dokku remotes via the official client","text":"<p>In some cases, users may deploy a given repository to multiple Dokku apps. This is especially useful when deploying to pre-production environments or using review apps. The official client now supports a series of <code>remote</code> subcommands that allow users to manage remotes for a local repository.</p> <p>See the remote client documentation for further details.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#bug-fixes","title":"Bug Fixes","text":"","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#nginx-proxy-rebuilds-early-to-avoid-downtime","title":"Nginx proxy rebuilds early to avoid downtime","text":"<p>In a previous release, we moved the <code>web</code> process to be deployed first. This allowed folks to quickly see errors on their mainline process, vs seeing those near the end. The end result, however, made it so that apps with large numbers of process types had downtime as the old <code>web</code> containers were removed after a minute if the app also used <code>nginx</code> as it's proxy layer. Users of other proxy implementations - such as Caddy, Haproxy, and Traefik - are not affected by this bug.</p> <p>We now trigger an early rebuild of the nginx config for users utilizing the <code>nginx</code> proxy implementation. Concerned users should switch to other proxy implementations to be completely unaffected by this change.</p> <p>Note that a future release of Dokku will also provide an optional nginx-proxy layer based on labels similar to our other proxy implementations. This will avoid long-standing downtime issues and hopefully allow us to be more flexible in how applications can be proxied. See the nginx-docker-proxy project for more details.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#avoid-reinstalling-plugins-in-the-provided-dokku-docker-image","title":"Avoid reinstalling plugins in the provided Dokku docker image","text":"<p>We now no longer attempt to reinstall plugins that already exist. This fixes issues for users that specify plugins via a <code>plugin-list</code> versus installing directly to the docker image via a custom Dockerfile.</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#fix-pack-entrypoint-support","title":"Fix pack entrypoint support","text":"<p>A recent change in CNB's pack utility changed how processes were launched, causing any process to fail to start. We now specify a custom entrypoint to fix this issue. Users of CNB can get back to building their apps!</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#dokku-pro","title":"Dokku Pro","text":"<p>Dokku Pro is a commercial offering that provides a familiar Web UI for all common tasks performed by developers. End users can expect an interface that provides various complex cli commands in an intuitive, app-centric manner, quickly speeding up tasks that might otherwise be difficult for new and old users to perform. Additionally, it provides a way to perform these tasks remotely via a json api, enabling easier, audited remote management of servers. Finally, Dokku Pro provides an alternative, https-based method for deploying code which can be used in environments that lockdown ssh access to servers.</p> <p>Interested in purchasing Dokku Pro? Dokku Pro is currently provided under early bird pricing (with the price going up as we continue to release new versions). Server licenses are sold in perpetuity, so lock in lower pricing today!</p> <p>Purchase Now</p>","tags":["dokku","release"]},{"location":"2023/dokku-0.30.0/#the-next-minor-release","title":"The Next Minor Release","text":"<p>Our next release will continue on the 7 outstanding 1.0 issues. We encourage folks to take a peak at them and help investigate bugs, come up with work plans, or contribute PRs where possible to help bring us over the finish line.</p> <p>As always, please post issues with bugs or functionality you think Dokku might benefit from. As well, feel free to hop into Github Discussions or Slack channel if you have questions, comments, or concerns.</p> <p>If you're using Dokku - especially for commercial purposes - consider donating to project development via Github Sponsors, OpenCollective, or Patreon. Funds go to general development, support, and infrastructure costs.</p>","tags":["dokku","release"]}]}